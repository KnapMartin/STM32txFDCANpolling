
CanTestG474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007554  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007734  08007734  00008734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f8  080077f8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  080077f8  080077f8  000087f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007800  08007800  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007800  08007800  00008800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007804  08007804  00008804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007808  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c08  2000006c  08007874  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c74  08007874  00009c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f553  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db6  00000000  00000000  000285ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  0002c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ca  00000000  00000000  0002de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051a4  00000000  00000000  0002f342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7c7  00000000  00000000  000344e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d258  00000000  00000000  00050cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015df05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007900  00000000  00000000  0015df48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00165848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800771c 	.word	0x0800771c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800771c 	.word	0x0800771c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *data, int len)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 100);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	b29a      	uxth	r2, r3
 8000520:	2364      	movs	r3, #100	@ 0x64
 8000522:	68b9      	ldr	r1, [r7, #8]
 8000524:	4803      	ldr	r0, [pc, #12]	@ (8000534 <_write+0x24>)
 8000526:	f002 ffd1 	bl	80034cc <HAL_UART_Transmit>
	return len;
 800052a:	687b      	ldr	r3, [r7, #4]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200000ec 	.word	0x200000ec

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fc3f 	bl	8000dbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f81a 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f910 	bl	8000768 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000548:	f000 f862 	bl	8000610 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 800054c:	f000 f8c0 	bl	80006d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f003 feac 	bl	80042ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000554:	4a05      	ldr	r2, [pc, #20]	@ (800056c <main+0x34>)
 8000556:	2100      	movs	r1, #0
 8000558:	4805      	ldr	r0, [pc, #20]	@ (8000570 <main+0x38>)
 800055a:	f003 fef1 	bl	8004340 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a04      	ldr	r2, [pc, #16]	@ (8000574 <main+0x3c>)
 8000562:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000564:	f003 fec6 	bl	80042f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <main+0x30>
 800056c:	08007784 	.word	0x08007784
 8000570:	08000845 	.word	0x08000845
 8000574:	20000180 	.word	0x20000180

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	2238      	movs	r2, #56	@ 0x38
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 fe06 	bl	8007198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059a:	2000      	movs	r0, #0
 800059c:	f001 fb98 	bl	8001cd0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2340      	movs	r3, #64	@ 0x40
 80005ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ba:	2355      	movs	r3, #85	@ 0x55
 80005bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fc32 	bl	8001e38 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005da:	f000 f98d 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 ff30 	bl	800245c <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000602:	f000 f979 	bl	80008f8 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	@ 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000616:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000618:	4a2c      	ldr	r2, [pc, #176]	@ (80006cc <MX_FDCAN1_Init+0xbc>)
 800061a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 800061c:	4b2a      	ldr	r3, [pc, #168]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 800061e:	2201      	movs	r2, #1
 8000620:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000628:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000636:	2200      	movs	r2, #0
 8000638:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 800063c:	2200      	movs	r2, #0
 800063e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 283;
 8000640:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000642:	f240 121b 	movw	r2, #283	@ 0x11b
 8000646:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 800064a:	2201      	movs	r2, #1
 800064c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800064e:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000650:	2201      	movs	r2, #1
 8000652:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000654:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000656:	2201      	movs	r2, #1
 8000658:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 800065c:	2201      	movs	r2, #1
 800065e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000662:	2201      	movs	r2, #1
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000668:	2201      	movs	r2, #1
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 800066e:	2201      	movs	r2, #1
 8000670:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 800067a:	2200      	movs	r2, #0
 800067c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000684:	4810      	ldr	r0, [pc, #64]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 8000686:	f000 fcb1 	bl	8000fec <HAL_FDCAN_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8000690:	f000 f932 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef canFilterConfig;
  canFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIndex = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterID1 = 0x000;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterID2 = 0x010;
 80006a8:	2310      	movs	r3, #16
 80006aa:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &canFilterConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_FDCAN1_Init+0xb8>)
 80006b2:	f000 fdf5 	bl	80012a0 <HAL_FDCAN_ConfigFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_FDCAN1_Init+0xb0>
  {
	  Error_Handler();
 80006bc:	f000 f91c 	bl	80008f8 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000088 	.word	0x20000088
 80006cc:	40006400 	.word	0x40006400

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 80006d6:	4a23      	ldr	r2, [pc, #140]	@ (8000764 <MX_USART2_UART_Init+0x94>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000718:	4811      	ldr	r0, [pc, #68]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 800071a:	f002 fe87 	bl	800342c <HAL_UART_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000724:	f000 f8e8 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	480d      	ldr	r0, [pc, #52]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 800072c:	f003 fcb0 	bl	8004090 <HAL_UARTEx_SetTxFifoThreshold>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000736:	f000 f8df 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4808      	ldr	r0, [pc, #32]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 800073e:	f003 fce5 	bl	800410c <HAL_UARTEx_SetRxFifoThreshold>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000748:	f000 f8d6 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	@ (8000760 <MX_USART2_UART_Init+0x90>)
 800074e:	f003 fc66 	bl	800401e <HAL_UARTEx_DisableFifoMode>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000758:	f000 f8ce 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000ec 	.word	0x200000ec
 8000764:	40004400 	.word	0x40004400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b2f      	ldr	r3, [pc, #188]	@ (800083c <MX_GPIO_Init+0xd4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a2e      	ldr	r2, [pc, #184]	@ (800083c <MX_GPIO_Init+0xd4>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b2c      	ldr	r3, [pc, #176]	@ (800083c <MX_GPIO_Init+0xd4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000796:	4b29      	ldr	r3, [pc, #164]	@ (800083c <MX_GPIO_Init+0xd4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a28      	ldr	r2, [pc, #160]	@ (800083c <MX_GPIO_Init+0xd4>)
 800079c:	f043 0320 	orr.w	r3, r3, #32
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b26      	ldr	r3, [pc, #152]	@ (800083c <MX_GPIO_Init+0xd4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0320 	and.w	r3, r3, #32
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b23      	ldr	r3, [pc, #140]	@ (800083c <MX_GPIO_Init+0xd4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	4a22      	ldr	r2, [pc, #136]	@ (800083c <MX_GPIO_Init+0xd4>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ba:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_GPIO_Init+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_GPIO_Init+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_GPIO_Init+0xd4>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_GPIO_Init+0xd4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f001 fa37 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480f      	ldr	r0, [pc, #60]	@ (8000840 <MX_GPIO_Init+0xd8>)
 8000802:	f001 f8a7 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000806:	2320      	movs	r3, #32
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000820:	f001 f898 	bl	8001954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2105      	movs	r1, #5
 8000828:	2028      	movs	r0, #40	@ 0x28
 800082a:	f000 fbb7 	bl	8000f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082e:	2028      	movs	r0, #40	@ 0x28
 8000830:	f000 fbce 	bl	8000fd0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	48000800 	.word	0x48000800

08000844 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	@ 0x38
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	FDCAN_TxHeaderTypeDef txHeader;
	txHeader.Identifier = 0x006;
 800084c:	2306      	movs	r3, #6
 800084e:	617b      	str	r3, [r7, #20]
	txHeader.IdType = FDCAN_STANDARD_ID;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
	txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
	txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000858:	2308      	movs	r3, #8
 800085a:	623b      	str	r3, [r7, #32]
	txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
	txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.MessageMarker = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t txData[8] = {'C', 'A', 'N', ' ', 'm', 'e', 's', 'g'};
 8000870:	4a15      	ldr	r2, [pc, #84]	@ (80008c8 <StartDefaultTask+0x84>)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800087a:	e883 0003 	stmia.w	r3, {r0, r1}

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800087e:	4813      	ldr	r0, [pc, #76]	@ (80008cc <StartDefaultTask+0x88>)
 8000880:	f000 fd68 	bl	8001354 <HAL_FDCAN_Start>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <StartDefaultTask+0x4a>
	{
		Error_Handler();
 800088a:	f000 f835 	bl	80008f8 <Error_Handler>
	}

	printf("CANFD tx polling example CMSIS OS2\r\n");
 800088e:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <StartDefaultTask+0x8c>)
 8000890:	f006 fba2 	bl	8006fd8 <puts>

	/* Infinite loop */
	for(;;)
	{
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) == HAL_OK)
 8000894:	f107 020c 	add.w	r2, r7, #12
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480b      	ldr	r0, [pc, #44]	@ (80008cc <StartDefaultTask+0x88>)
 80008a0:	f000 fd80 	bl	80013a4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10a      	bne.n	80008c0 <StartDefaultTask+0x7c>
		{
			while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0)
 80008aa:	bf00      	nop
 80008ac:	4807      	ldr	r0, [pc, #28]	@ (80008cc <StartDefaultTask+0x88>)
 80008ae:	f000 fdbd 	bl	800142c <HAL_FDCAN_GetTxFifoFreeLevel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0f9      	beq.n	80008ac <StartDefaultTask+0x68>
			{
				// Wait for the Tx FIFO to have free space
			}
			osDelay(100);
 80008b8:	2064      	movs	r0, #100	@ 0x64
 80008ba:	f003 fdd3 	bl	8004464 <osDelay>
 80008be:	e7e9      	b.n	8000894 <StartDefaultTask+0x50>
		}
		else
		{
			Error_Handler();
 80008c0:	f000 f81a 	bl	80008f8 <Error_Handler>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) == HAL_OK)
 80008c4:	e7e6      	b.n	8000894 <StartDefaultTask+0x50>
 80008c6:	bf00      	nop
 80008c8:	08007764 	.word	0x08007764
 80008cc:	20000088 	.word	0x20000088
 80008d0:	08007740 	.word	0x08007740

080008d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d101      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e6:	f000 fa83 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40001000 	.word	0x40001000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <HAL_MspInit+0x50>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090e:	4a11      	ldr	r2, [pc, #68]	@ (8000954 <HAL_MspInit+0x50>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6613      	str	r3, [r2, #96]	@ 0x60
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <HAL_MspInit+0x50>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <HAL_MspInit+0x50>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000926:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <HAL_MspInit+0x50>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6593      	str	r3, [r2, #88]	@ 0x58
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_MspInit+0x50>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	210f      	movs	r1, #15
 800093e:	f06f 0001 	mvn.w	r0, #1
 8000942:	f000 fb2b 	bl	8000f9c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000946:	f001 fa67 	bl	8001e18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09e      	sub	sp, #120	@ 0x78
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	2254      	movs	r2, #84	@ 0x54
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f006 fc0d 	bl	8007198 <memset>
  if(hfdcan->Instance==FDCAN1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a28      	ldr	r2, [pc, #160]	@ (8000a24 <HAL_FDCAN_MspInit+0xcc>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d149      	bne.n	8000a1c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800098e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000992:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4618      	mov	r0, r3
 800099a:	f001 ffad 	bl	80028f8 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80009a4:	f7ff ffa8 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <HAL_FDCAN_MspInit+0xd0>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ac:	4a1e      	ldr	r2, [pc, #120]	@ (8000a28 <HAL_FDCAN_MspInit+0xd0>)
 80009ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <HAL_FDCAN_MspInit+0xd0>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_FDCAN_MspInit+0xd0>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	4a18      	ldr	r2, [pc, #96]	@ (8000a28 <HAL_FDCAN_MspInit+0xd0>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <HAL_FDCAN_MspInit+0xd0>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009d8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009ea:	2309      	movs	r3, #9
 80009ec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f8:	f000 ffac 	bl	8001954 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2105      	movs	r1, #5
 8000a00:	2015      	movs	r0, #21
 8000a02:	f000 facb 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a06:	2015      	movs	r0, #21
 8000a08:	f000 fae2 	bl	8000fd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2105      	movs	r1, #5
 8000a10:	2016      	movs	r0, #22
 8000a12:	f000 fac3 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000a16:	2016      	movs	r0, #22
 8000a18:	f000 fada 	bl	8000fd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3778      	adds	r7, #120	@ 0x78
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40006400 	.word	0x40006400
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09e      	sub	sp, #120	@ 0x78
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2254      	movs	r2, #84	@ 0x54
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f006 fba3 	bl	8007198 <memset>
  if(huart->Instance==USART2)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad4 <HAL_UART_MspInit+0xa8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d136      	bne.n	8000aca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 ff45 	bl	80028f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a74:	f7ff ff40 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_UART_MspInit+0xac>)
 8000a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7c:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <HAL_UART_MspInit+0xac>)
 8000a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_UART_MspInit+0xac>)
 8000a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <HAL_UART_MspInit+0xac>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a94:	4a10      	ldr	r2, [pc, #64]	@ (8000ad8 <HAL_UART_MspInit+0xac>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <HAL_UART_MspInit+0xac>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac6:	f000 ff45 	bl	8001954 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aca:	bf00      	nop
 8000acc:	3778      	adds	r7, #120	@ 0x78
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	@ 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <HAL_InitTick+0xc4>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af0:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba0 <HAL_InitTick+0xc4>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af8:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <HAL_InitTick+0xc4>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b04:	f107 020c 	add.w	r2, r7, #12
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fe7a 	bl	8002808 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b14:	f001 fe4c 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8000b18:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ba4 <HAL_InitTick+0xc8>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0c9b      	lsrs	r3, r3, #18
 8000b24:	3b01      	subs	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <HAL_InitTick+0xcc>)
 8000b2a:	4a20      	ldr	r2, [pc, #128]	@ (8000bac <HAL_InitTick+0xd0>)
 8000b2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <HAL_InitTick+0xcc>)
 8000b30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba8 <HAL_InitTick+0xcc>)
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <HAL_InitTick+0xcc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <HAL_InitTick+0xcc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b48:	4817      	ldr	r0, [pc, #92]	@ (8000ba8 <HAL_InitTick+0xcc>)
 8000b4a:	f002 f923 	bl	8002d94 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11b      	bne.n	8000b94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b5c:	4812      	ldr	r0, [pc, #72]	@ (8000ba8 <HAL_InitTick+0xcc>)
 8000b5e:	f002 f97b 	bl	8002e58 <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d111      	bne.n	8000b94 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b70:	2036      	movs	r0, #54	@ 0x36
 8000b72:	f000 fa2d 	bl	8000fd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d808      	bhi.n	8000b8e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2036      	movs	r0, #54	@ 0x36
 8000b82:	f000 fa0b 	bl	8000f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <HAL_InitTick+0xd4>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e002      	b.n	8000b94 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3730      	adds	r7, #48	@ 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	20000184 	.word	0x20000184
 8000bac:	40001000 	.word	0x40001000
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <NMI_Handler+0x4>

08000bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <FDCAN1_IT0_IRQHandler+0x10>)
 8000bf2:	f000 fc2d 	bl	8001450 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000088 	.word	0x20000088

08000c00 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <FDCAN1_IT1_IRQHandler+0x10>)
 8000c06:	f000 fc23 	bl	8001450 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000088 	.word	0x20000088

08000c14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c1c:	f001 f834 	bl	8001c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <TIM6_DAC_IRQHandler+0x10>)
 8000c2a:	f002 f98d 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000184 	.word	0x20000184

08000c38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00a      	b.n	8000c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	4601      	mov	r1, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf0      	blt.n	8000c4a <_read+0x12>
  }

  return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_isatty>:

int _isatty(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	@ (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f006 fa92 	bl	8007234 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20020000 	.word	0x20020000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200001d0 	.word	0x200001d0
 8000d44:	20001c78 	.word	0x20001c78

08000d48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d6c:	480d      	ldr	r0, [pc, #52]	@ (8000da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ffea 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	@ (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	@ (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f006 fa51 	bl	8007240 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fbcb 	bl	8000538 <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   r0, =_estack
 8000da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000db0:	08007808 	.word	0x08007808
  ldr r2, =_sbss
 8000db4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000db8:	20001c74 	.word	0x20001c74

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>

08000dbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f8dc 	bl	8000f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f7ff fe84 	bl	8000adc <HAL_InitTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	e001      	b.n	8000de4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de0:	f7ff fd90 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de4:	79fb      	ldrb	r3, [r7, #7]

}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_IncTick+0x1c>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <HAL_IncTick+0x20>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a03      	ldr	r2, [pc, #12]	@ (8000e0c <HAL_IncTick+0x1c>)
 8000e00:	6013      	str	r3, [r2, #0]
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	200001d4 	.word	0x200001d4
 8000e10:	20000008 	.word	0x20000008

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200001d4 	.word	0x200001d4

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	@ (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	@ (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	@ (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	@ 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff4c 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000faa:	f7ff ff63 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff ffb3 	bl	8000f20 <NVIC_EncodePriority>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff82 	bl	8000ecc <__NVIC_SetPriority>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff56 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e147      	b.n	800128e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d106      	bne.n	8001018 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fca0 	bl	8000958 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	699a      	ldr	r2, [r3, #24]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0210 	bic.w	r2, r2, #16
 8001026:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001028:	f7ff fef4 	bl	8000e14 <HAL_GetTick>
 800102c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800102e:	e012      	b.n	8001056 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001030:	f7ff fef0 	bl	8000e14 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b0a      	cmp	r3, #10
 800103c:	d90b      	bls.n	8001056 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001042:	f043 0201 	orr.w	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2203      	movs	r2, #3
 800104e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e11b      	b.n	800128e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b08      	cmp	r3, #8
 8001062:	d0e5      	beq.n	8001030 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	699a      	ldr	r2, [r3, #24]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001074:	f7ff fece 	bl	8000e14 <HAL_GetTick>
 8001078:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800107a:	e012      	b.n	80010a2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800107c:	f7ff feca 	bl	8000e14 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b0a      	cmp	r3, #10
 8001088:	d90b      	bls.n	80010a2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0f5      	b.n	800128e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0e5      	beq.n	800107c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0202 	orr.w	r2, r2, #2
 80010be:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a74      	ldr	r2, [pc, #464]	@ (8001298 <HAL_FDCAN_Init+0x2ac>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d103      	bne.n	80010d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80010ca:	4a74      	ldr	r2, [pc, #464]	@ (800129c <HAL_FDCAN_Init+0x2b0>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7c1b      	ldrb	r3, [r3, #16]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d108      	bne.n	80010ec <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699a      	ldr	r2, [r3, #24]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010e8:	619a      	str	r2, [r3, #24]
 80010ea:	e007      	b.n	80010fc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7c5b      	ldrb	r3, [r3, #17]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d108      	bne.n	8001116 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	699a      	ldr	r2, [r3, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001112:	619a      	str	r2, [r3, #24]
 8001114:	e007      	b.n	8001126 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	699a      	ldr	r2, [r3, #24]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001124:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7c9b      	ldrb	r3, [r3, #18]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d108      	bne.n	8001140 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	699a      	ldr	r2, [r3, #24]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800113c:	619a      	str	r2, [r3, #24]
 800113e:	e007      	b.n	8001150 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	699a      	ldr	r2, [r3, #24]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800114e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001174:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0210 	bic.w	r2, r2, #16
 8001184:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d108      	bne.n	80011a0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 0204 	orr.w	r2, r2, #4
 800119c:	619a      	str	r2, [r3, #24]
 800119e:	e02c      	b.n	80011fa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d028      	beq.n	80011fa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d01c      	beq.n	80011ea <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011be:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0210 	orr.w	r2, r2, #16
 80011ce:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d110      	bne.n	80011fa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	699a      	ldr	r2, [r3, #24]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0220 	orr.w	r2, r2, #32
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	e007      	b.n	80011fa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	3b01      	subs	r3, #1
 8001200:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	3b01      	subs	r3, #1
 8001208:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800120a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001212:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	3b01      	subs	r3, #1
 800121c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001222:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001224:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800122e:	d115      	bne.n	800125c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001234:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123a:	3b01      	subs	r3, #1
 800123c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800123e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001244:	3b01      	subs	r3, #1
 8001246:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001248:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001250:	3b01      	subs	r3, #1
 8001252:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001258:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800125a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fa86 	bl	8001784 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40006400 	.word	0x40006400
 800129c:	40006500 	.word	0x40006500

080012a0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80012b0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d002      	beq.n	80012be <HAL_FDCAN_ConfigFilter+0x1e>
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d13d      	bne.n	800133a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d119      	bne.n	80012fa <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80012d2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80012da:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e01d      	b.n	8001336 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	075a      	lsls	r2, r3, #29
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	079a      	lsls	r2, r3, #30
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4313      	orrs	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4413      	add	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3304      	adds	r3, #4
 800132e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e006      	b.n	8001348 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133e:	f043 0202 	orr.w	r2, r3, #2
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
  }
}
 8001348:	4618      	mov	r0, r3
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d110      	bne.n	800138a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699a      	ldr	r2, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e006      	b.n	8001398 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138e:	f043 0204 	orr.w	r2, r3, #4
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
  }
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d12c      	bne.n	8001416 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d007      	beq.n	80013dc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e023      	b.n	8001424 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80013e4:	0c1b      	lsrs	r3, r3, #16
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 fa32 	bl	800185c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	fa01 f202 	lsl.w	r2, r1, r2
 8001404:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001408:	2201      	movs	r2, #1
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	409a      	lsls	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e006      	b.n	8001424 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	f043 0208 	orr.w	r2, r3, #8
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
  }
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	@ 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800145e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800146c:	4013      	ands	r3, r2
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001484:	4013      	ands	r3, r2
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800148e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149c:	4013      	ands	r3, r2
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014a6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80014aa:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b2:	6a3a      	ldr	r2, [r7, #32]
 80014b4:	4013      	ands	r3, r2
 80014b6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014be:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014c2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014de:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2240      	movs	r2, #64	@ 0x40
 80014fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f921 	bl	8001744 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d019      	beq.n	8001540 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d014      	beq.n	8001540 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800151e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001536:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f8e3 	bl	8001706 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800154c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800154e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f8a2 	bl	800169a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001562:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f8a2 	bl	80016b0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001578:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800157a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f8a2 	bl	80016c6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00c      	beq.n	80015a6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800159e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f89b 	bl	80016dc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d018      	beq.n	80015e2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d013      	beq.n	80015e2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015c2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4013      	ands	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80015da:	68f9      	ldr	r1, [r7, #12]
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f887 	bl	80016f0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00c      	beq.n	8001606 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f88b 	bl	800171c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001622:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f883 	bl	8001730 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00f      	beq.n	8001654 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00a      	beq.n	8001654 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001646:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001662:	69f9      	ldr	r1, [r7, #28]
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f881 	bl	800176c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a3a      	ldr	r2, [r7, #32]
 8001676:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f863 	bl	8001758 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	@ 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800178c:	4b30      	ldr	r3, [pc, #192]	@ (8001850 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800178e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2f      	ldr	r2, [pc, #188]	@ (8001854 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d103      	bne.n	80017a2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80017a0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001858 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d103      	bne.n	80017b4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80017b2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017c2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ca:	041a      	lsls	r2, r3, #16
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017e8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f0:	061a      	lsls	r2, r3, #24
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e005      	b.n	8001836 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3304      	adds	r3, #4
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3f3      	bcc.n	800182a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	4000a400 	.word	0x4000a400
 8001854:	40006800 	.word	0x40006800
 8001858:	40006c00 	.word	0x40006c00

0800185c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	@ 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10a      	bne.n	8001888 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800187a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001882:	4313      	orrs	r3, r2
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e00a      	b.n	800189e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001890:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001896:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001898:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800189c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80018a8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80018ae:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80018b4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	3304      	adds	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	3304      	adds	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e020      	b.n	8001932 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3303      	adds	r3, #3
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3302      	adds	r3, #2
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	440b      	add	r3, r1
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001908:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	440b      	add	r3, r1
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001916:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	440a      	add	r2, r1
 800191e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001920:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	3304      	adds	r3, #4
 800192a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3304      	adds	r3, #4
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <FDCAN_CopyMessageToRAM+0xf4>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	461a      	mov	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4293      	cmp	r3, r2
 8001940:	d3d6      	bcc.n	80018f0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3724      	adds	r7, #36	@ 0x24
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	080077c0 	.word	0x080077c0

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001962:	e15a      	b.n	8001c1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 814c 	beq.w	8001c14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d005      	beq.n	8001994 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001990:	2b02      	cmp	r3, #2
 8001992:	d130      	bne.n	80019f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ca:	2201      	movs	r2, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 0201 	and.w	r2, r3, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d017      	beq.n	8001a32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d123      	bne.n	8001a86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	6939      	ldr	r1, [r7, #16]
 8001a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0203 	and.w	r2, r3, #3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80a6 	beq.w	8001c14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c38 <HAL_GPIO_Init+0x2e4>)
 8001aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001acc:	4a5a      	ldr	r2, [pc, #360]	@ (8001c38 <HAL_GPIO_Init+0x2e4>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ad4:	4b58      	ldr	r3, [pc, #352]	@ (8001c38 <HAL_GPIO_Init+0x2e4>)
 8001ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae0:	4a56      	ldr	r2, [pc, #344]	@ (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b0a:	d01f      	beq.n	8001b4c <HAL_GPIO_Init+0x1f8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8001c40 <HAL_GPIO_Init+0x2ec>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d019      	beq.n	8001b48 <HAL_GPIO_Init+0x1f4>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a4b      	ldr	r2, [pc, #300]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d013      	beq.n	8001b44 <HAL_GPIO_Init+0x1f0>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c48 <HAL_GPIO_Init+0x2f4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d00d      	beq.n	8001b40 <HAL_GPIO_Init+0x1ec>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a49      	ldr	r2, [pc, #292]	@ (8001c4c <HAL_GPIO_Init+0x2f8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d007      	beq.n	8001b3c <HAL_GPIO_Init+0x1e8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a48      	ldr	r2, [pc, #288]	@ (8001c50 <HAL_GPIO_Init+0x2fc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d101      	bne.n	8001b38 <HAL_GPIO_Init+0x1e4>
 8001b34:	2305      	movs	r3, #5
 8001b36:	e00a      	b.n	8001b4e <HAL_GPIO_Init+0x1fa>
 8001b38:	2306      	movs	r3, #6
 8001b3a:	e008      	b.n	8001b4e <HAL_GPIO_Init+0x1fa>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e006      	b.n	8001b4e <HAL_GPIO_Init+0x1fa>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e004      	b.n	8001b4e <HAL_GPIO_Init+0x1fa>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x1fa>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_GPIO_Init+0x1fa>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4093      	lsls	r3, r2
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b5e:	4937      	ldr	r1, [pc, #220]	@ (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6c:	4b39      	ldr	r3, [pc, #228]	@ (8001c54 <HAL_GPIO_Init+0x300>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b90:	4a30      	ldr	r2, [pc, #192]	@ (8001c54 <HAL_GPIO_Init+0x300>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b96:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <HAL_GPIO_Init+0x300>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bba:	4a26      	ldr	r2, [pc, #152]	@ (8001c54 <HAL_GPIO_Init+0x300>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <HAL_GPIO_Init+0x300>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c54 <HAL_GPIO_Init+0x300>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <HAL_GPIO_Init+0x300>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c0e:	4a11      	ldr	r2, [pc, #68]	@ (8001c54 <HAL_GPIO_Init+0x300>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f ae9d 	bne.w	8001964 <HAL_GPIO_Init+0x10>
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	48000400 	.word	0x48000400
 8001c44:	48000800 	.word	0x48000800
 8001c48:	48000c00 	.word	0x48000c00
 8001c4c:	48001000 	.word	0x48001000
 8001c50:	48001400 	.word	0x48001400
 8001c54:	40010400 	.word	0x40010400

08001c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
 8001c64:	4613      	mov	r3, r2
 8001c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c68:	787b      	ldrb	r3, [r7, #1]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c92:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f806 	bl	8001cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d141      	bne.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cde:	4b4b      	ldr	r3, [pc, #300]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cea:	d131      	bne.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cec:	4b47      	ldr	r3, [pc, #284]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cf2:	4a46      	ldr	r2, [pc, #280]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cfc:	4b43      	ldr	r3, [pc, #268]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d04:	4a41      	ldr	r2, [pc, #260]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d0c:	4b40      	ldr	r3, [pc, #256]	@ (8001e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2232      	movs	r2, #50	@ 0x32
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	4a3f      	ldr	r2, [pc, #252]	@ (8001e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	0c9b      	lsrs	r3, r3, #18
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d22:	e002      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2a:	4b38      	ldr	r3, [pc, #224]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d36:	d102      	bne.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f2      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3e:	4b33      	ldr	r3, [pc, #204]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d4a:	d158      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e057      	b.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d50:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d56:	4a2d      	ldr	r2, [pc, #180]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d60:	e04d      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d68:	d141      	bne.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d6a:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d76:	d131      	bne.n	8001ddc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d78:	4b24      	ldr	r3, [pc, #144]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d7e:	4a23      	ldr	r2, [pc, #140]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d88:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d90:	4a1e      	ldr	r2, [pc, #120]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2232      	movs	r2, #50	@ 0x32
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dae:	e002      	b.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dc2:	d102      	bne.n	8001dca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f2      	bne.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd6:	d112      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e011      	b.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001dec:	e007      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001df6:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dfc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e26:	6093      	str	r3, [r2, #8]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e2fe      	b.n	8002448 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d075      	beq.n	8001f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e56:	4b97      	ldr	r3, [pc, #604]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e60:	4b94      	ldr	r3, [pc, #592]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d102      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3e>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d002      	beq.n	8001e7c <HAL_RCC_OscConfig+0x44>
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	4b8d      	ldr	r3, [pc, #564]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d05b      	beq.n	8001f40 <HAL_RCC_OscConfig+0x108>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d157      	bne.n	8001f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e2d9      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x74>
 8001e9e:	4b85      	ldr	r3, [pc, #532]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a84      	ldr	r2, [pc, #528]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e01d      	b.n	8001ee8 <HAL_RCC_OscConfig+0xb0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x98>
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7e      	ldr	r2, [pc, #504]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a7b      	ldr	r2, [pc, #492]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xb0>
 8001ed0:	4b78      	ldr	r3, [pc, #480]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a77      	ldr	r2, [pc, #476]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b75      	ldr	r3, [pc, #468]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a74      	ldr	r2, [pc, #464]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7fe ff90 	bl	8000e14 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7fe ff8c 	bl	8000e14 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e29e      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xc0>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe ff7c 	bl	8000e14 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7fe ff78 	bl	8000e14 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	@ 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e28a      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	4b60      	ldr	r3, [pc, #384]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0xe8>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d075      	beq.n	800203a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4e:	4b59      	ldr	r3, [pc, #356]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f58:	4b56      	ldr	r3, [pc, #344]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d102      	bne.n	8001f6e <HAL_RCC_OscConfig+0x136>
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d002      	beq.n	8001f74 <HAL_RCC_OscConfig+0x13c>
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d11f      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f74:	4b4f      	ldr	r3, [pc, #316]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_OscConfig+0x154>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e25d      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b49      	ldr	r3, [pc, #292]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	4946      	ldr	r1, [pc, #280]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fa0:	4b45      	ldr	r3, [pc, #276]	@ (80020b8 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fd99 	bl	8000adc <HAL_InitTick>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d043      	beq.n	8002038 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e249      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d023      	beq.n	8002004 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe ff24 	bl	8000e14 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7fe ff20 	bl	8000e14 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e232      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe2:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b31      	ldr	r3, [pc, #196]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	061b      	lsls	r3, r3, #24
 8001ffc:	492d      	ldr	r1, [pc, #180]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
 8002002:	e01a      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002004:	4b2b      	ldr	r3, [pc, #172]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2a      	ldr	r2, [pc, #168]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 800200a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800200e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe ff00 	bl	8000e14 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002018:	f7fe fefc 	bl	8000e14 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e20e      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800202a:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x1e0>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d041      	beq.n	80020ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01c      	beq.n	8002088 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002054:	4a17      	ldr	r2, [pc, #92]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7fe fed9 	bl	8000e14 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002066:	f7fe fed5 	bl	8000e14 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e1e7      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002078:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0ef      	beq.n	8002066 <HAL_RCC_OscConfig+0x22e>
 8002086:	e020      	b.n	80020ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002088:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 800208a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800208e:	4a09      	ldr	r2, [pc, #36]	@ (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7fe febc 	bl	8000e14 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800209e:	e00d      	b.n	80020bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a0:	f7fe feb8 	bl	8000e14 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d906      	bls.n	80020bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1ca      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020bc:	4b8c      	ldr	r3, [pc, #560]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ea      	bne.n	80020a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80a6 	beq.w	8002224 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020dc:	4b84      	ldr	r3, [pc, #528]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_OscConfig+0x2b4>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x2b6>
 80020ec:	2300      	movs	r3, #0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b7f      	ldr	r3, [pc, #508]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	4a7e      	ldr	r2, [pc, #504]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fe:	4b7c      	ldr	r3, [pc, #496]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210e:	4b79      	ldr	r3, [pc, #484]	@ (80022f4 <HAL_RCC_OscConfig+0x4bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211a:	4b76      	ldr	r3, [pc, #472]	@ (80022f4 <HAL_RCC_OscConfig+0x4bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a75      	ldr	r2, [pc, #468]	@ (80022f4 <HAL_RCC_OscConfig+0x4bc>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fe75 	bl	8000e14 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7fe fe71 	bl	8000e14 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e183      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002140:	4b6c      	ldr	r3, [pc, #432]	@ (80022f4 <HAL_RCC_OscConfig+0x4bc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d108      	bne.n	8002166 <HAL_RCC_OscConfig+0x32e>
 8002154:	4b66      	ldr	r3, [pc, #408]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215a:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002164:	e024      	b.n	80021b0 <HAL_RCC_OscConfig+0x378>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b05      	cmp	r3, #5
 800216c:	d110      	bne.n	8002190 <HAL_RCC_OscConfig+0x358>
 800216e:	4b60      	ldr	r3, [pc, #384]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002174:	4a5e      	ldr	r2, [pc, #376]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800217e:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002184:	4a5a      	ldr	r2, [pc, #360]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800218e:	e00f      	b.n	80021b0 <HAL_RCC_OscConfig+0x378>
 8002190:	4b57      	ldr	r3, [pc, #348]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	4a56      	ldr	r2, [pc, #344]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021a0:	4b53      	ldr	r3, [pc, #332]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a6:	4a52      	ldr	r2, [pc, #328]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d016      	beq.n	80021e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7fe fe2c 	bl	8000e14 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7fe fe28 	bl	8000e14 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e138      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b46      	ldr	r3, [pc, #280]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ed      	beq.n	80021c0 <HAL_RCC_OscConfig+0x388>
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7fe fe15 	bl	8000e14 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe fe11 	bl	8000e14 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e121      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002204:	4b3a      	ldr	r3, [pc, #232]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ed      	bne.n	80021ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002212:	7ffb      	ldrb	r3, [r7, #31]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002218:	4b35      	ldr	r3, [pc, #212]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	4a34      	ldr	r2, [pc, #208]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800221e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d03c      	beq.n	80022aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01c      	beq.n	8002272 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800223a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800223e:	4a2c      	ldr	r2, [pc, #176]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7fe fde4 	bl	8000e14 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002250:	f7fe fde0 	bl	8000e14 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0f2      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002262:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002264:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ef      	beq.n	8002250 <HAL_RCC_OscConfig+0x418>
 8002270:	e01b      	b.n	80022aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002272:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002274:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002278:	4a1d      	ldr	r2, [pc, #116]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe fdc7 	bl	8000e14 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800228a:	f7fe fdc3 	bl	8000e14 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0d5      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800229c:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800229e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ef      	bne.n	800228a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80c9 	beq.w	8002446 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	f000 8083 	beq.w	80023c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d15e      	bne.n	8002388 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80022d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fd9d 	bl	8000e14 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	e00c      	b.n	80022f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fd99 	bl	8000e14 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d905      	bls.n	80022f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0ab      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f8:	4b55      	ldr	r3, [pc, #340]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ec      	bne.n	80022de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002304:	4b52      	ldr	r3, [pc, #328]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4b52      	ldr	r3, [pc, #328]	@ (8002454 <HAL_RCC_OscConfig+0x61c>)
 800230a:	4013      	ands	r3, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6a11      	ldr	r1, [r2, #32]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002314:	3a01      	subs	r2, #1
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	4311      	orrs	r1, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800231e:	0212      	lsls	r2, r2, #8
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002326:	0852      	lsrs	r2, r2, #1
 8002328:	3a01      	subs	r2, #1
 800232a:	0552      	lsls	r2, r2, #21
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002332:	0852      	lsrs	r2, r2, #1
 8002334:	3a01      	subs	r2, #1
 8002336:	0652      	lsls	r2, r2, #25
 8002338:	4311      	orrs	r1, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800233e:	06d2      	lsls	r2, r2, #27
 8002340:	430a      	orrs	r2, r1
 8002342:	4943      	ldr	r1, [pc, #268]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 8002344:	4313      	orrs	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002348:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a40      	ldr	r2, [pc, #256]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 800234e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002352:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002354:	4b3e      	ldr	r3, [pc, #248]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a3d      	ldr	r2, [pc, #244]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800235e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fd58 	bl	8000e14 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fd54 	bl	8000e14 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e066      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x530>
 8002386:	e05e      	b.n	8002446 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b31      	ldr	r3, [pc, #196]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a30      	ldr	r2, [pc, #192]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 800238e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fd3e 	bl	8000e14 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fd3a 	bl	8000e14 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e04c      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ae:	4b28      	ldr	r3, [pc, #160]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023ba:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	4924      	ldr	r1, [pc, #144]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 80023c0:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <HAL_RCC_OscConfig+0x620>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	60cb      	str	r3, [r1, #12]
 80023c6:	e03e      	b.n	8002446 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e039      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <HAL_RCC_OscConfig+0x618>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0203 	and.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d12c      	bne.n	8002442 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	3b01      	subs	r3, #1
 80023f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d123      	bne.n	8002442 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d11b      	bne.n	8002442 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d113      	bne.n	8002442 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	3b01      	subs	r3, #1
 8002428:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d109      	bne.n	8002442 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	3b01      	subs	r3, #1
 800243c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	019f800c 	.word	0x019f800c
 8002458:	feeefffc 	.word	0xfeeefffc

0800245c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e11e      	b.n	80026b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002474:	4b91      	ldr	r3, [pc, #580]	@ (80026bc <HAL_RCC_ClockConfig+0x260>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d910      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b8e      	ldr	r3, [pc, #568]	@ (80026bc <HAL_RCC_ClockConfig+0x260>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 020f 	bic.w	r2, r3, #15
 800248a:	498c      	ldr	r1, [pc, #560]	@ (80026bc <HAL_RCC_ClockConfig+0x260>)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b8a      	ldr	r3, [pc, #552]	@ (80026bc <HAL_RCC_ClockConfig+0x260>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e106      	b.n	80026b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d073      	beq.n	8002598 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d129      	bne.n	800250c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b8:	4b81      	ldr	r3, [pc, #516]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0f4      	b.n	80026b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024c8:	f000 f9d0 	bl	800286c <RCC_GetSysClockFreqFromPLLSource>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4a7c      	ldr	r2, [pc, #496]	@ (80026c4 <HAL_RCC_ClockConfig+0x268>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d93f      	bls.n	8002556 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024d6:	4b7a      	ldr	r3, [pc, #488]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d033      	beq.n	8002556 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d12f      	bne.n	8002556 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024f6:	4b72      	ldr	r3, [pc, #456]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024fe:	4a70      	ldr	r2, [pc, #448]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002504:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e024      	b.n	8002556 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d107      	bne.n	8002524 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002514:	4b6a      	ldr	r3, [pc, #424]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0c6      	b.n	80026b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002524:	4b66      	ldr	r3, [pc, #408]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0be      	b.n	80026b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002534:	f000 f8ce 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 8002538:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4a61      	ldr	r2, [pc, #388]	@ (80026c4 <HAL_RCC_ClockConfig+0x268>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d909      	bls.n	8002556 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002542:	4b5f      	ldr	r3, [pc, #380]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800254a:	4a5d      	ldr	r2, [pc, #372]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 800254c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002550:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b5a      	ldr	r3, [pc, #360]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4957      	ldr	r1, [pc, #348]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002568:	f7fe fc54 	bl	8000e14 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fc50 	bl	8000e14 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e095      	b.n	80026b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b4e      	ldr	r3, [pc, #312]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d023      	beq.n	80025ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b43      	ldr	r3, [pc, #268]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a42      	ldr	r2, [pc, #264]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80025b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025c8:	4b3d      	ldr	r3, [pc, #244]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025d0:	4a3b      	ldr	r2, [pc, #236]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80025d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b39      	ldr	r3, [pc, #228]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4936      	ldr	r1, [pc, #216]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
 80025ea:	e008      	b.n	80025fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b80      	cmp	r3, #128	@ 0x80
 80025f0:	d105      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025f2:	4b33      	ldr	r3, [pc, #204]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4a32      	ldr	r2, [pc, #200]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 80025f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025fe:	4b2f      	ldr	r3, [pc, #188]	@ (80026bc <HAL_RCC_ClockConfig+0x260>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d21d      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260c:	4b2b      	ldr	r3, [pc, #172]	@ (80026bc <HAL_RCC_ClockConfig+0x260>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 020f 	bic.w	r2, r3, #15
 8002614:	4929      	ldr	r1, [pc, #164]	@ (80026bc <HAL_RCC_ClockConfig+0x260>)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800261c:	f7fe fbfa 	bl	8000e14 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7fe fbf6 	bl	8000e14 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e03b      	b.n	80026b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_RCC_ClockConfig+0x260>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d1ed      	bne.n	8002624 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4917      	ldr	r1, [pc, #92]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002672:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	490f      	ldr	r1, [pc, #60]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002686:	f000 f825 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 800268a:	4602      	mov	r2, r0
 800268c:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <HAL_RCC_ClockConfig+0x264>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	490c      	ldr	r1, [pc, #48]	@ (80026c8 <HAL_RCC_ClockConfig+0x26c>)
 8002698:	5ccb      	ldrb	r3, [r1, r3]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <HAL_RCC_ClockConfig+0x270>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026a6:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <HAL_RCC_ClockConfig+0x274>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fa16 	bl	8000adc <HAL_InitTick>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40022000 	.word	0x40022000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	04c4b400 	.word	0x04c4b400
 80026c8:	080077a8 	.word	0x080077a8
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000004 	.word	0x20000004

080026d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026da:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d102      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002790 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	e047      	b.n	800277c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026ec:	4b27      	ldr	r3, [pc, #156]	@ (800278c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d102      	bne.n	80026fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f8:	4b26      	ldr	r3, [pc, #152]	@ (8002794 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	e03e      	b.n	800277c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026fe:	4b23      	ldr	r3, [pc, #140]	@ (800278c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d136      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800270a:	4b20      	ldr	r3, [pc, #128]	@ (800278c <HAL_RCC_GetSysClockFreq+0xb8>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3301      	adds	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002728:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <HAL_RCC_GetSysClockFreq+0xc0>)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	4a16      	ldr	r2, [pc, #88]	@ (800278c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002732:	68d2      	ldr	r2, [r2, #12]
 8002734:	0a12      	lsrs	r2, r2, #8
 8002736:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
      break;
 8002740:	e00c      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002742:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4a10      	ldr	r2, [pc, #64]	@ (800278c <HAL_RCC_GetSysClockFreq+0xb8>)
 800274c:	68d2      	ldr	r2, [r2, #12]
 800274e:	0a12      	lsrs	r2, r2, #8
 8002750:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
      break;
 800275a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800275c:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_GetSysClockFreq+0xb8>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0e5b      	lsrs	r3, r3, #25
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	3301      	adds	r3, #1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	fbb2 f3f3 	udiv	r3, r2, r3
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	e001      	b.n	800277c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800277c:	693b      	ldr	r3, [r7, #16]
}
 800277e:	4618      	mov	r0, r3
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	00f42400 	.word	0x00f42400
 8002794:	016e3600 	.word	0x016e3600

08002798 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800279c:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <HAL_RCC_GetHCLKFreq+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027b4:	f7ff fff0 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4904      	ldr	r1, [pc, #16]	@ (80027d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	080077b8 	.word	0x080077b8

080027dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027e0:	f7ff ffda 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0adb      	lsrs	r3, r3, #11
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4904      	ldr	r1, [pc, #16]	@ (8002804 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	080077b8 	.word	0x080077b8

08002808 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	220f      	movs	r2, #15
 8002816:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002818:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <HAL_RCC_GetClockConfig+0x5c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0203 	and.w	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002824:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <HAL_RCC_GetClockConfig+0x5c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <HAL_RCC_GetClockConfig+0x5c>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800283c:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_RCC_GetClockConfig+0x5c>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800284a:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <HAL_RCC_GetClockConfig+0x60>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 020f 	and.w	r2, r3, #15
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	40022000 	.word	0x40022000

0800286c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002872:	4b1e      	ldr	r3, [pc, #120]	@ (80028ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800287c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d10c      	bne.n	80028aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002890:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800289a:	68d2      	ldr	r2, [r2, #12]
 800289c:	0a12      	lsrs	r2, r2, #8
 800289e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
    break;
 80028a8:	e00c      	b.n	80028c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028aa:	4a12      	ldr	r2, [pc, #72]	@ (80028f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	4a0e      	ldr	r2, [pc, #56]	@ (80028ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	0a12      	lsrs	r2, r2, #8
 80028b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
    break;
 80028c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0e5b      	lsrs	r3, r3, #25
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028de:	687b      	ldr	r3, [r7, #4]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40021000 	.word	0x40021000
 80028f0:	016e3600 	.word	0x016e3600
 80028f4:	00f42400 	.word	0x00f42400

080028f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002900:	2300      	movs	r3, #0
 8002902:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002904:	2300      	movs	r3, #0
 8002906:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8098 	beq.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b43      	ldr	r3, [pc, #268]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	4b40      	ldr	r3, [pc, #256]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002930:	6593      	str	r3, [r2, #88]	@ 0x58
 8002932:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293e:	2301      	movs	r3, #1
 8002940:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002942:	4b3a      	ldr	r3, [pc, #232]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a39      	ldr	r2, [pc, #228]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800294e:	f7fe fa61 	bl	8000e14 <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002954:	e009      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7fe fa5d 	bl	8000e14 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d902      	bls.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	74fb      	strb	r3, [r7, #19]
        break;
 8002968:	e005      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800296a:	4b30      	ldr	r3, [pc, #192]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ef      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d159      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800297c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01e      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	d019      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002998:	4b23      	ldr	r3, [pc, #140]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a4:	4b20      	ldr	r3, [pc, #128]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c4:	4a18      	ldr	r2, [pc, #96]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fa1d 	bl	8000e14 <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029dc:	e00b      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe fa19 	bl	8000e14 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d902      	bls.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	74fb      	strb	r3, [r7, #19]
            break;
 80029f4:	e006      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ec      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0a:	4b07      	ldr	r3, [pc, #28]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a20:	e008      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	74bb      	strb	r3, [r7, #18]
 8002a26:	e005      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a34:	7c7b      	ldrb	r3, [r7, #17]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d105      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3a:	4ba7      	ldr	r3, [pc, #668]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3e:	4aa6      	ldr	r2, [pc, #664]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a52:	4ba1      	ldr	r3, [pc, #644]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a58:	f023 0203 	bic.w	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	499d      	ldr	r1, [pc, #628]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a74:	4b98      	ldr	r3, [pc, #608]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	f023 020c 	bic.w	r2, r3, #12
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4995      	ldr	r1, [pc, #596]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a96:	4b90      	ldr	r3, [pc, #576]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	498c      	ldr	r1, [pc, #560]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ab8:	4b87      	ldr	r3, [pc, #540]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	4984      	ldr	r1, [pc, #528]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ada:	4b7f      	ldr	r3, [pc, #508]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	497b      	ldr	r1, [pc, #492]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002afc:	4b76      	ldr	r3, [pc, #472]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	4973      	ldr	r1, [pc, #460]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1e:	4b6e      	ldr	r3, [pc, #440]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	496a      	ldr	r1, [pc, #424]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b40:	4b65      	ldr	r3, [pc, #404]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4962      	ldr	r1, [pc, #392]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b62:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	4959      	ldr	r1, [pc, #356]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b84:	4b54      	ldr	r3, [pc, #336]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b8a:	f023 0203 	bic.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	4951      	ldr	r1, [pc, #324]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	4948      	ldr	r1, [pc, #288]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d015      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bc8:	4b43      	ldr	r3, [pc, #268]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4940      	ldr	r1, [pc, #256]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a3a      	ldr	r2, [pc, #232]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c00:	4b35      	ldr	r3, [pc, #212]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0e:	4932      	ldr	r1, [pc, #200]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c20:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c2a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d015      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c38:	4b27      	ldr	r3, [pc, #156]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c46:	4924      	ldr	r1, [pc, #144]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c56:	d105      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c58:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7e:	4916      	ldr	r1, [pc, #88]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c90:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a10      	ldr	r2, [pc, #64]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d019      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4908      	ldr	r1, [pc, #32]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cc6:	d109      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc8:	4b03      	ldr	r3, [pc, #12]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a02      	ldr	r2, [pc, #8]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cd2:	60d3      	str	r3, [r2, #12]
 8002cd4:	e002      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ce8:	4b29      	ldr	r3, [pc, #164]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	4926      	ldr	r1, [pc, #152]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d06:	d105      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d08:	4b21      	ldr	r3, [pc, #132]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a20      	ldr	r2, [pc, #128]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d12:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d015      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002d20:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2e:	4918      	ldr	r1, [pc, #96]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d40:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a12      	ldr	r2, [pc, #72]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d4a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d015      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d58:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	490a      	ldr	r1, [pc, #40]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d76:	d105      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d84:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000

08002d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e049      	b.n	8002e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f841 	bl	8002e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 fa30 	bl	8003238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d001      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e054      	b.n	8002f1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a26      	ldr	r2, [pc, #152]	@ (8002f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d022      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x80>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e9a:	d01d      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x80>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a22      	ldr	r2, [pc, #136]	@ (8002f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x80>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	@ (8002f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x80>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x80>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f38 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x80>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f3c <HAL_TIM_Base_Start_IT+0xe4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x80>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f40 <HAL_TIM_Base_Start_IT+0xe8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d115      	bne.n	8002f04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_TIM_Base_Start_IT+0xec>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d015      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0xbe>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef0:	d011      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f02:	e008      	b.n	8002f16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e000      	b.n	8002f18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40013400 	.word	0x40013400
 8002f3c:	40014000 	.word	0x40014000
 8002f40:	40015000 	.word	0x40015000
 8002f44:	00010007 	.word	0x00010007

08002f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0202 	mvn.w	r2, #2
 8002f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f931 	bl	80031fa <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f923 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f934 	bl	800320e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d020      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0204 	mvn.w	r2, #4
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f90b 	bl	80031fa <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8fd 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f90e 	bl	800320e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0208 	mvn.w	r2, #8
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2204      	movs	r2, #4
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8e5 	bl	80031fa <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8d7 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f8e8 	bl	800320e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d020      	beq.n	8003090 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0210 	mvn.w	r2, #16
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2208      	movs	r2, #8
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8bf 	bl	80031fa <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8b1 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f8c2 	bl	800320e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0201 	mvn.w	r2, #1
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fc10 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d104      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00c      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80030da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f969 	bl	80033b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00c      	beq.n	8003106 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80030fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f961 	bl	80033c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f87c 	bl	8003222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0220 	mvn.w	r2, #32
 8003146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f929 	bl	80033a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00c      	beq.n	8003172 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800316a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f935 	bl	80033dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800318e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f92d 	bl	80033f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00c      	beq.n	80031ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80031b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f925 	bl	8003404 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00c      	beq.n	80031de <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f91d 	bl	8003418 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a4c      	ldr	r2, [pc, #304]	@ (800337c <TIM_Base_SetConfig+0x144>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d017      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003256:	d013      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a49      	ldr	r2, [pc, #292]	@ (8003380 <TIM_Base_SetConfig+0x148>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00f      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a48      	ldr	r2, [pc, #288]	@ (8003384 <TIM_Base_SetConfig+0x14c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a47      	ldr	r2, [pc, #284]	@ (8003388 <TIM_Base_SetConfig+0x150>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a46      	ldr	r2, [pc, #280]	@ (800338c <TIM_Base_SetConfig+0x154>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a45      	ldr	r2, [pc, #276]	@ (8003390 <TIM_Base_SetConfig+0x158>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a39      	ldr	r2, [pc, #228]	@ (800337c <TIM_Base_SetConfig+0x144>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d023      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a0:	d01f      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a36      	ldr	r2, [pc, #216]	@ (8003380 <TIM_Base_SetConfig+0x148>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01b      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a35      	ldr	r2, [pc, #212]	@ (8003384 <TIM_Base_SetConfig+0x14c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d017      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a34      	ldr	r2, [pc, #208]	@ (8003388 <TIM_Base_SetConfig+0x150>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a33      	ldr	r2, [pc, #204]	@ (800338c <TIM_Base_SetConfig+0x154>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00f      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a33      	ldr	r2, [pc, #204]	@ (8003394 <TIM_Base_SetConfig+0x15c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a32      	ldr	r2, [pc, #200]	@ (8003398 <TIM_Base_SetConfig+0x160>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a31      	ldr	r2, [pc, #196]	@ (800339c <TIM_Base_SetConfig+0x164>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <TIM_Base_SetConfig+0x158>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a18      	ldr	r2, [pc, #96]	@ (800337c <TIM_Base_SetConfig+0x144>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a1a      	ldr	r2, [pc, #104]	@ (800338c <TIM_Base_SetConfig+0x154>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a1a      	ldr	r2, [pc, #104]	@ (8003394 <TIM_Base_SetConfig+0x15c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a19      	ldr	r2, [pc, #100]	@ (8003398 <TIM_Base_SetConfig+0x160>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a18      	ldr	r2, [pc, #96]	@ (800339c <TIM_Base_SetConfig+0x164>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a13      	ldr	r2, [pc, #76]	@ (8003390 <TIM_Base_SetConfig+0x158>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]
  }
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800
 8003388:	40000c00 	.word	0x40000c00
 800338c:	40013400 	.word	0x40013400
 8003390:	40015000 	.word	0x40015000
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800

080033a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e042      	b.n	80034c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7fd faeb 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2224      	movs	r2, #36	@ 0x24
 800345a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fbb2 	bl	8003be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8b3 	bl	80035e8 <UART_SetConfig>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e01b      	b.n	80034c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800349a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fc31 	bl	8003d24 <UART_CheckIdleState>
 80034c2:	4603      	mov	r3, r0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	@ 0x28
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d17b      	bne.n	80035de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_UART_Transmit+0x26>
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e074      	b.n	80035e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2221      	movs	r2, #33	@ 0x21
 8003502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003506:	f7fd fc85 	bl	8000e14 <HAL_GetTick>
 800350a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003524:	d108      	bne.n	8003538 <HAL_UART_Transmit+0x6c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	e003      	b.n	8003540 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003540:	e030      	b.n	80035a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	2180      	movs	r1, #128	@ 0x80
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fc93 	bl	8003e78 <UART_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e03d      	b.n	80035e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003578:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3302      	adds	r3, #2
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	e007      	b.n	8003592 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	3301      	adds	r3, #1
 8003590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1c8      	bne.n	8003542 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2200      	movs	r2, #0
 80035b8:	2140      	movs	r1, #64	@ 0x40
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fc5c 	bl	8003e78 <UART_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e006      	b.n	80035e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3720      	adds	r7, #32
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ec:	b08c      	sub	sp, #48	@ 0x30
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	431a      	orrs	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	431a      	orrs	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4313      	orrs	r3, r2
 800360e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4baa      	ldr	r3, [pc, #680]	@ (80038c0 <UART_SetConfig+0x2d8>)
 8003618:	4013      	ands	r3, r2
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003620:	430b      	orrs	r3, r1
 8003622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a9f      	ldr	r2, [pc, #636]	@ (80038c4 <UART_SetConfig+0x2dc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003650:	4313      	orrs	r3, r2
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800365e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003668:	430b      	orrs	r3, r1
 800366a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003672:	f023 010f 	bic.w	r1, r3, #15
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a90      	ldr	r2, [pc, #576]	@ (80038c8 <UART_SetConfig+0x2e0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d125      	bne.n	80036d8 <UART_SetConfig+0xf0>
 800368c:	4b8f      	ldr	r3, [pc, #572]	@ (80038cc <UART_SetConfig+0x2e4>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b03      	cmp	r3, #3
 8003698:	d81a      	bhi.n	80036d0 <UART_SetConfig+0xe8>
 800369a:	a201      	add	r2, pc, #4	@ (adr r2, 80036a0 <UART_SetConfig+0xb8>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	080036b1 	.word	0x080036b1
 80036a4:	080036c1 	.word	0x080036c1
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036c9 	.word	0x080036c9
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b6:	e116      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80036b8:	2302      	movs	r3, #2
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036be:	e112      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80036c0:	2304      	movs	r3, #4
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036c6:	e10e      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80036c8:	2308      	movs	r3, #8
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ce:	e10a      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80036d0:	2310      	movs	r3, #16
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036d6:	e106      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a7c      	ldr	r2, [pc, #496]	@ (80038d0 <UART_SetConfig+0x2e8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d138      	bne.n	8003754 <UART_SetConfig+0x16c>
 80036e2:	4b7a      	ldr	r3, [pc, #488]	@ (80038cc <UART_SetConfig+0x2e4>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d82d      	bhi.n	800374c <UART_SetConfig+0x164>
 80036f0:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <UART_SetConfig+0x110>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	0800374d 	.word	0x0800374d
 8003700:	0800374d 	.word	0x0800374d
 8003704:	0800374d 	.word	0x0800374d
 8003708:	0800373d 	.word	0x0800373d
 800370c:	0800374d 	.word	0x0800374d
 8003710:	0800374d 	.word	0x0800374d
 8003714:	0800374d 	.word	0x0800374d
 8003718:	08003735 	.word	0x08003735
 800371c:	0800374d 	.word	0x0800374d
 8003720:	0800374d 	.word	0x0800374d
 8003724:	0800374d 	.word	0x0800374d
 8003728:	08003745 	.word	0x08003745
 800372c:	2300      	movs	r3, #0
 800372e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003732:	e0d8      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003734:	2302      	movs	r3, #2
 8003736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800373a:	e0d4      	b.n	80038e6 <UART_SetConfig+0x2fe>
 800373c:	2304      	movs	r3, #4
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003742:	e0d0      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003744:	2308      	movs	r3, #8
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374a:	e0cc      	b.n	80038e6 <UART_SetConfig+0x2fe>
 800374c:	2310      	movs	r3, #16
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003752:	e0c8      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5e      	ldr	r2, [pc, #376]	@ (80038d4 <UART_SetConfig+0x2ec>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d125      	bne.n	80037aa <UART_SetConfig+0x1c2>
 800375e:	4b5b      	ldr	r3, [pc, #364]	@ (80038cc <UART_SetConfig+0x2e4>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003764:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003768:	2b30      	cmp	r3, #48	@ 0x30
 800376a:	d016      	beq.n	800379a <UART_SetConfig+0x1b2>
 800376c:	2b30      	cmp	r3, #48	@ 0x30
 800376e:	d818      	bhi.n	80037a2 <UART_SetConfig+0x1ba>
 8003770:	2b20      	cmp	r3, #32
 8003772:	d00a      	beq.n	800378a <UART_SetConfig+0x1a2>
 8003774:	2b20      	cmp	r3, #32
 8003776:	d814      	bhi.n	80037a2 <UART_SetConfig+0x1ba>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <UART_SetConfig+0x19a>
 800377c:	2b10      	cmp	r3, #16
 800377e:	d008      	beq.n	8003792 <UART_SetConfig+0x1aa>
 8003780:	e00f      	b.n	80037a2 <UART_SetConfig+0x1ba>
 8003782:	2300      	movs	r3, #0
 8003784:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003788:	e0ad      	b.n	80038e6 <UART_SetConfig+0x2fe>
 800378a:	2302      	movs	r3, #2
 800378c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003790:	e0a9      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003792:	2304      	movs	r3, #4
 8003794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003798:	e0a5      	b.n	80038e6 <UART_SetConfig+0x2fe>
 800379a:	2308      	movs	r3, #8
 800379c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037a0:	e0a1      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80037a2:	2310      	movs	r3, #16
 80037a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037a8:	e09d      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a4a      	ldr	r2, [pc, #296]	@ (80038d8 <UART_SetConfig+0x2f0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d125      	bne.n	8003800 <UART_SetConfig+0x218>
 80037b4:	4b45      	ldr	r3, [pc, #276]	@ (80038cc <UART_SetConfig+0x2e4>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037be:	2bc0      	cmp	r3, #192	@ 0xc0
 80037c0:	d016      	beq.n	80037f0 <UART_SetConfig+0x208>
 80037c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80037c4:	d818      	bhi.n	80037f8 <UART_SetConfig+0x210>
 80037c6:	2b80      	cmp	r3, #128	@ 0x80
 80037c8:	d00a      	beq.n	80037e0 <UART_SetConfig+0x1f8>
 80037ca:	2b80      	cmp	r3, #128	@ 0x80
 80037cc:	d814      	bhi.n	80037f8 <UART_SetConfig+0x210>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <UART_SetConfig+0x1f0>
 80037d2:	2b40      	cmp	r3, #64	@ 0x40
 80037d4:	d008      	beq.n	80037e8 <UART_SetConfig+0x200>
 80037d6:	e00f      	b.n	80037f8 <UART_SetConfig+0x210>
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037de:	e082      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80037e0:	2302      	movs	r3, #2
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e6:	e07e      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80037e8:	2304      	movs	r3, #4
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ee:	e07a      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80037f0:	2308      	movs	r3, #8
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037f6:	e076      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037fe:	e072      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a35      	ldr	r2, [pc, #212]	@ (80038dc <UART_SetConfig+0x2f4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d12a      	bne.n	8003860 <UART_SetConfig+0x278>
 800380a:	4b30      	ldr	r3, [pc, #192]	@ (80038cc <UART_SetConfig+0x2e4>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003810:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003814:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003818:	d01a      	beq.n	8003850 <UART_SetConfig+0x268>
 800381a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800381e:	d81b      	bhi.n	8003858 <UART_SetConfig+0x270>
 8003820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003824:	d00c      	beq.n	8003840 <UART_SetConfig+0x258>
 8003826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800382a:	d815      	bhi.n	8003858 <UART_SetConfig+0x270>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <UART_SetConfig+0x250>
 8003830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003834:	d008      	beq.n	8003848 <UART_SetConfig+0x260>
 8003836:	e00f      	b.n	8003858 <UART_SetConfig+0x270>
 8003838:	2300      	movs	r3, #0
 800383a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800383e:	e052      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003840:	2302      	movs	r3, #2
 8003842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003846:	e04e      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003848:	2304      	movs	r3, #4
 800384a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800384e:	e04a      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003850:	2308      	movs	r3, #8
 8003852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003856:	e046      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003858:	2310      	movs	r3, #16
 800385a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800385e:	e042      	b.n	80038e6 <UART_SetConfig+0x2fe>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a17      	ldr	r2, [pc, #92]	@ (80038c4 <UART_SetConfig+0x2dc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d13a      	bne.n	80038e0 <UART_SetConfig+0x2f8>
 800386a:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <UART_SetConfig+0x2e4>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003870:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003874:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003878:	d01a      	beq.n	80038b0 <UART_SetConfig+0x2c8>
 800387a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800387e:	d81b      	bhi.n	80038b8 <UART_SetConfig+0x2d0>
 8003880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003884:	d00c      	beq.n	80038a0 <UART_SetConfig+0x2b8>
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800388a:	d815      	bhi.n	80038b8 <UART_SetConfig+0x2d0>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <UART_SetConfig+0x2b0>
 8003890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003894:	d008      	beq.n	80038a8 <UART_SetConfig+0x2c0>
 8003896:	e00f      	b.n	80038b8 <UART_SetConfig+0x2d0>
 8003898:	2300      	movs	r3, #0
 800389a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800389e:	e022      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80038a0:	2302      	movs	r3, #2
 80038a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038a6:	e01e      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80038a8:	2304      	movs	r3, #4
 80038aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ae:	e01a      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80038b0:	2308      	movs	r3, #8
 80038b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038b6:	e016      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80038b8:	2310      	movs	r3, #16
 80038ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038be:	e012      	b.n	80038e6 <UART_SetConfig+0x2fe>
 80038c0:	cfff69f3 	.word	0xcfff69f3
 80038c4:	40008000 	.word	0x40008000
 80038c8:	40013800 	.word	0x40013800
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40004400 	.word	0x40004400
 80038d4:	40004800 	.word	0x40004800
 80038d8:	40004c00 	.word	0x40004c00
 80038dc:	40005000 	.word	0x40005000
 80038e0:	2310      	movs	r3, #16
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4aae      	ldr	r2, [pc, #696]	@ (8003ba4 <UART_SetConfig+0x5bc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f040 8097 	bne.w	8003a20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d823      	bhi.n	8003942 <UART_SetConfig+0x35a>
 80038fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <UART_SetConfig+0x318>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003925 	.word	0x08003925
 8003904:	08003943 	.word	0x08003943
 8003908:	0800392d 	.word	0x0800392d
 800390c:	08003943 	.word	0x08003943
 8003910:	08003933 	.word	0x08003933
 8003914:	08003943 	.word	0x08003943
 8003918:	08003943 	.word	0x08003943
 800391c:	08003943 	.word	0x08003943
 8003920:	0800393b 	.word	0x0800393b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003924:	f7fe ff44 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8003928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800392a:	e010      	b.n	800394e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800392c:	4b9e      	ldr	r3, [pc, #632]	@ (8003ba8 <UART_SetConfig+0x5c0>)
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003930:	e00d      	b.n	800394e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003932:	f7fe fecf 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 8003936:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003938:	e009      	b.n	800394e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003940:	e005      	b.n	800394e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800394c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8130 	beq.w	8003bb6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	4a94      	ldr	r2, [pc, #592]	@ (8003bac <UART_SetConfig+0x5c4>)
 800395c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003960:	461a      	mov	r2, r3
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	fbb3 f3f2 	udiv	r3, r3, r2
 8003968:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	429a      	cmp	r2, r3
 8003978:	d305      	bcc.n	8003986 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	429a      	cmp	r2, r3
 8003984:	d903      	bls.n	800398e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800398c:	e113      	b.n	8003bb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	2200      	movs	r2, #0
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	60fa      	str	r2, [r7, #12]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	4a84      	ldr	r2, [pc, #528]	@ (8003bac <UART_SetConfig+0x5c4>)
 800399c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2200      	movs	r2, #0
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039b0:	f7fc fc36 	bl	8000220 <__aeabi_uldivmod>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	020b      	lsls	r3, r1, #8
 80039c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039ca:	0202      	lsls	r2, r0, #8
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	6849      	ldr	r1, [r1, #4]
 80039d0:	0849      	lsrs	r1, r1, #1
 80039d2:	2000      	movs	r0, #0
 80039d4:	460c      	mov	r4, r1
 80039d6:	4605      	mov	r5, r0
 80039d8:	eb12 0804 	adds.w	r8, r2, r4
 80039dc:	eb43 0905 	adc.w	r9, r3, r5
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	469a      	mov	sl, r3
 80039e8:	4693      	mov	fp, r2
 80039ea:	4652      	mov	r2, sl
 80039ec:	465b      	mov	r3, fp
 80039ee:	4640      	mov	r0, r8
 80039f0:	4649      	mov	r1, r9
 80039f2:	f7fc fc15 	bl	8000220 <__aeabi_uldivmod>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4613      	mov	r3, r2
 80039fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a04:	d308      	bcc.n	8003a18 <UART_SetConfig+0x430>
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a0c:	d204      	bcs.n	8003a18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a3a      	ldr	r2, [r7, #32]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	e0ce      	b.n	8003bb6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a1e:	e0ca      	b.n	8003bb6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a28:	d166      	bne.n	8003af8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d827      	bhi.n	8003a82 <UART_SetConfig+0x49a>
 8003a32:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <UART_SetConfig+0x450>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a65 	.word	0x08003a65
 8003a40:	08003a6d 	.word	0x08003a6d
 8003a44:	08003a83 	.word	0x08003a83
 8003a48:	08003a73 	.word	0x08003a73
 8003a4c:	08003a83 	.word	0x08003a83
 8003a50:	08003a83 	.word	0x08003a83
 8003a54:	08003a83 	.word	0x08003a83
 8003a58:	08003a7b 	.word	0x08003a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f7fe fea8 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8003a60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a62:	e014      	b.n	8003a8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a64:	f7fe feba 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 8003a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a6a:	e010      	b.n	8003a8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba8 <UART_SetConfig+0x5c0>)
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a70:	e00d      	b.n	8003a8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a72:	f7fe fe2f 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 8003a76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a78:	e009      	b.n	8003a8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a80:	e005      	b.n	8003a8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8090 	beq.w	8003bb6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	4a44      	ldr	r2, [pc, #272]	@ (8003bac <UART_SetConfig+0x5c4>)
 8003a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003aa8:	005a      	lsls	r2, r3, #1
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	441a      	add	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b0f      	cmp	r3, #15
 8003ac0:	d916      	bls.n	8003af0 <UART_SetConfig+0x508>
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac8:	d212      	bcs.n	8003af0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f023 030f 	bic.w	r3, r3, #15
 8003ad2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	8bfb      	ldrh	r3, [r7, #30]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	8bfa      	ldrh	r2, [r7, #30]
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	e062      	b.n	8003bb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003af6:	e05e      	b.n	8003bb6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003af8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d828      	bhi.n	8003b52 <UART_SetConfig+0x56a>
 8003b00:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <UART_SetConfig+0x520>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003b35 	.word	0x08003b35
 8003b10:	08003b3d 	.word	0x08003b3d
 8003b14:	08003b53 	.word	0x08003b53
 8003b18:	08003b43 	.word	0x08003b43
 8003b1c:	08003b53 	.word	0x08003b53
 8003b20:	08003b53 	.word	0x08003b53
 8003b24:	08003b53 	.word	0x08003b53
 8003b28:	08003b4b 	.word	0x08003b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b2c:	f7fe fe40 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8003b30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b32:	e014      	b.n	8003b5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b34:	f7fe fe52 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 8003b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b3a:	e010      	b.n	8003b5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba8 <UART_SetConfig+0x5c0>)
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b40:	e00d      	b.n	8003b5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b42:	f7fe fdc7 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 8003b46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b48:	e009      	b.n	8003b5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b50:	e005      	b.n	8003b5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d028      	beq.n	8003bb6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	4a10      	ldr	r2, [pc, #64]	@ (8003bac <UART_SetConfig+0x5c4>)
 8003b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	441a      	add	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	d910      	bls.n	8003bb0 <UART_SetConfig+0x5c8>
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b94:	d20c      	bcs.n	8003bb0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60da      	str	r2, [r3, #12]
 8003ba0:	e009      	b.n	8003bb6 <UART_SetConfig+0x5ce>
 8003ba2:	bf00      	nop
 8003ba4:	40008000 	.word	0x40008000
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	080077d0 	.word	0x080077d0
      }
      else
      {
        ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003bd2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3730      	adds	r7, #48	@ 0x30
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01a      	beq.n	8003cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cde:	d10a      	bne.n	8003cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
  }
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b098      	sub	sp, #96	@ 0x60
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d34:	f7fd f86e 	bl	8000e14 <HAL_GetTick>
 8003d38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d12f      	bne.n	8003da8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d50:	2200      	movs	r2, #0
 8003d52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f88e 	bl	8003e78 <UART_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d022      	beq.n	8003da8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e6      	bne.n	8003d62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e063      	b.n	8003e70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d149      	bne.n	8003e4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f857 	bl	8003e78 <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03c      	beq.n	8003e4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e6      	bne.n	8003dd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3308      	adds	r3, #8
 8003e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e22:	61fa      	str	r2, [r7, #28]
 8003e24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	69b9      	ldr	r1, [r7, #24]
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e5      	bne.n	8003e02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e012      	b.n	8003e70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3758      	adds	r7, #88	@ 0x58
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e88:	e04f      	b.n	8003f2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e90:	d04b      	beq.n	8003f2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7fc ffbf 	bl	8000e14 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e04e      	b.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d037      	beq.n	8003f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b80      	cmp	r3, #128	@ 0x80
 8003ebe:	d034      	beq.n	8003f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d031      	beq.n	8003f2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d110      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f838 	bl	8003f52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e029      	b.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f04:	d111      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f81e 	bl	8003f52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e00f      	b.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d0a0      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b095      	sub	sp, #84	@ 0x54
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e6      	bne.n	8003f5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3308      	adds	r3, #8
 8003f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e3      	bne.n	8003f8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d118      	bne.n	8003ffe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
 8003fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e6      	bne.n	8003fcc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004012:	bf00      	nop
 8004014:	3754      	adds	r7, #84	@ 0x54
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_UARTEx_DisableFifoMode+0x16>
 8004030:	2302      	movs	r3, #2
 8004032:	e027      	b.n	8004084 <HAL_UARTEx_DisableFifoMode+0x66>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2224      	movs	r2, #36	@ 0x24
 8004040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004062:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e02d      	b.n	8004104 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	@ 0x24
 80040b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0201 	bic.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f84f 	bl	8004188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004120:	2302      	movs	r3, #2
 8004122:	e02d      	b.n	8004180 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	@ 0x24
 8004130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f811 	bl	8004188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041a8:	e031      	b.n	800420e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041aa:	2308      	movs	r3, #8
 80041ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041ae:	2308      	movs	r3, #8
 80041b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	0e5b      	lsrs	r3, r3, #25
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	0f5b      	lsrs	r3, r3, #29
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041d2:	7bbb      	ldrb	r3, [r7, #14]
 80041d4:	7b3a      	ldrb	r2, [r7, #12]
 80041d6:	4911      	ldr	r1, [pc, #68]	@ (800421c <UARTEx_SetNbDataToProcess+0x94>)
 80041d8:	5c8a      	ldrb	r2, [r1, r2]
 80041da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041de:	7b3a      	ldrb	r2, [r7, #12]
 80041e0:	490f      	ldr	r1, [pc, #60]	@ (8004220 <UARTEx_SetNbDataToProcess+0x98>)
 80041e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	7b7a      	ldrb	r2, [r7, #13]
 80041f4:	4909      	ldr	r1, [pc, #36]	@ (800421c <UARTEx_SetNbDataToProcess+0x94>)
 80041f6:	5c8a      	ldrb	r2, [r1, r2]
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80041fc:	7b7a      	ldrb	r2, [r7, #13]
 80041fe:	4908      	ldr	r1, [pc, #32]	@ (8004220 <UARTEx_SetNbDataToProcess+0x98>)
 8004200:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004202:	fb93 f3f2 	sdiv	r3, r3, r2
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	080077e8 	.word	0x080077e8
 8004220:	080077f0 	.word	0x080077f0

08004224 <__NVIC_SetPriority>:
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	6039      	str	r1, [r7, #0]
 800422e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004234:	2b00      	cmp	r3, #0
 8004236:	db0a      	blt.n	800424e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	490c      	ldr	r1, [pc, #48]	@ (8004270 <__NVIC_SetPriority+0x4c>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	0112      	lsls	r2, r2, #4
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	440b      	add	r3, r1
 8004248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800424c:	e00a      	b.n	8004264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	4908      	ldr	r1, [pc, #32]	@ (8004274 <__NVIC_SetPriority+0x50>)
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	3b04      	subs	r3, #4
 800425c:	0112      	lsls	r2, r2, #4
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	440b      	add	r3, r1
 8004262:	761a      	strb	r2, [r3, #24]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000e100 	.word	0xe000e100
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800427c:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <SysTick_Handler+0x1c>)
 800427e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004280:	f001 fd18 	bl	8005cb4 <xTaskGetSchedulerState>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800428a:	f002 fb0d 	bl	80068a8 <xPortSysTickHandler>
  }
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	e000e010 	.word	0xe000e010

08004298 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800429c:	2100      	movs	r1, #0
 800429e:	f06f 0004 	mvn.w	r0, #4
 80042a2:	f7ff ffbf 	bl	8004224 <__NVIC_SetPriority>
#endif
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042b2:	f3ef 8305 	mrs	r3, IPSR
 80042b6:	603b      	str	r3, [r7, #0]
  return(result);
 80042b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042be:	f06f 0305 	mvn.w	r3, #5
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	e00c      	b.n	80042e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80042c6:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <osKernelInitialize+0x44>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042ce:	4b08      	ldr	r3, [pc, #32]	@ (80042f0 <osKernelInitialize+0x44>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	e002      	b.n	80042e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80042da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042e0:	687b      	ldr	r3, [r7, #4]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200001d8 	.word	0x200001d8

080042f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042fa:	f3ef 8305 	mrs	r3, IPSR
 80042fe:	603b      	str	r3, [r7, #0]
  return(result);
 8004300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004306:	f06f 0305 	mvn.w	r3, #5
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	e010      	b.n	8004330 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800430e:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <osKernelStart+0x48>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d109      	bne.n	800432a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004316:	f7ff ffbf 	bl	8004298 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800431a:	4b08      	ldr	r3, [pc, #32]	@ (800433c <osKernelStart+0x48>)
 800431c:	2202      	movs	r2, #2
 800431e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004320:	f001 f87a 	bl	8005418 <vTaskStartScheduler>
      stat = osOK;
 8004324:	2300      	movs	r3, #0
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	e002      	b.n	8004330 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800432a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800432e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004330:	687b      	ldr	r3, [r7, #4]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	200001d8 	.word	0x200001d8

08004340 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	@ 0x38
 8004344:	af04      	add	r7, sp, #16
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004350:	f3ef 8305 	mrs	r3, IPSR
 8004354:	617b      	str	r3, [r7, #20]
  return(result);
 8004356:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004358:	2b00      	cmp	r3, #0
 800435a:	d17e      	bne.n	800445a <osThreadNew+0x11a>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d07b      	beq.n	800445a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004366:	2318      	movs	r3, #24
 8004368:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004372:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d045      	beq.n	8004406 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <osThreadNew+0x48>
        name = attr->name;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <osThreadNew+0x6e>
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	2b38      	cmp	r3, #56	@ 0x38
 80043a0:	d805      	bhi.n	80043ae <osThreadNew+0x6e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <osThreadNew+0x72>
        return (NULL);
 80043ae:	2300      	movs	r3, #0
 80043b0:	e054      	b.n	800445c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <osThreadNew+0xa8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b5b      	cmp	r3, #91	@ 0x5b
 80043d0:	d90a      	bls.n	80043e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d006      	beq.n	80043e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <osThreadNew+0xa8>
        mem = 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	e010      	b.n	800440a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10c      	bne.n	800440a <osThreadNew+0xca>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d108      	bne.n	800440a <osThreadNew+0xca>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d104      	bne.n	800440a <osThreadNew+0xca>
          mem = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	e001      	b.n	800440a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d110      	bne.n	8004432 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004418:	9202      	str	r2, [sp, #8]
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fe1a 	bl	8005060 <xTaskCreateStatic>
 800442c:	4603      	mov	r3, r0
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	e013      	b.n	800445a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d110      	bne.n	800445a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	b29a      	uxth	r2, r3
 800443c:	f107 0310 	add.w	r3, r7, #16
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fe68 	bl	8005120 <xTaskCreate>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <osThreadNew+0x11a>
            hTask = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800445a:	693b      	ldr	r3, [r7, #16]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3728      	adds	r7, #40	@ 0x28
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800446c:	f3ef 8305 	mrs	r3, IPSR
 8004470:	60bb      	str	r3, [r7, #8]
  return(result);
 8004472:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <osDelay+0x1c>
    stat = osErrorISR;
 8004478:	f06f 0305 	mvn.w	r3, #5
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	e007      	b.n	8004490 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <osDelay+0x2c>
      vTaskDelay(ticks);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 ff8e 	bl	80053ac <vTaskDelay>
    }
  }

  return (stat);
 8004490:	68fb      	ldr	r3, [r7, #12]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a07      	ldr	r2, [pc, #28]	@ (80044c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80044ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4a06      	ldr	r2, [pc, #24]	@ (80044cc <vApplicationGetIdleTaskMemory+0x30>)
 80044b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2280      	movs	r2, #128	@ 0x80
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	200001dc 	.word	0x200001dc
 80044cc:	20000238 	.word	0x20000238

080044d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a07      	ldr	r2, [pc, #28]	@ (80044fc <vApplicationGetTimerTaskMemory+0x2c>)
 80044e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4a06      	ldr	r2, [pc, #24]	@ (8004500 <vApplicationGetTimerTaskMemory+0x30>)
 80044e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ee:	601a      	str	r2, [r3, #0]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000438 	.word	0x20000438
 8004500:	20000494 	.word	0x20000494

08004504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f103 0208 	add.w	r2, r3, #8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800451c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f103 0208 	add.w	r2, r3, #8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f103 0208 	add.w	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045bc:	d103      	bne.n	80045c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e00c      	b.n	80045e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3308      	adds	r3, #8
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e002      	b.n	80045d4 <vListInsert+0x2e>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d2f6      	bcs.n	80045ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	601a      	str	r2, [r3, #0]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6892      	ldr	r2, [r2, #8]
 800462e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6852      	ldr	r2, [r2, #4]
 8004638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d103      	bne.n	800464c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	1e5a      	subs	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004698:	f002 f876 	bl	8006788 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a4:	68f9      	ldr	r1, [r7, #12]
 80046a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	441a      	add	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c8:	3b01      	subs	r3, #1
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	441a      	add	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	22ff      	movs	r2, #255	@ 0xff
 80046dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	22ff      	movs	r2, #255	@ 0xff
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d114      	bne.n	8004718 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01a      	beq.n	800472c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3310      	adds	r3, #16
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f91a 	bl	8005934 <xTaskRemoveFromEventList>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d012      	beq.n	800472c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004706:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <xQueueGenericReset+0xd0>)
 8004708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	e009      	b.n	800472c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3310      	adds	r3, #16
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fef1 	bl	8004504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3324      	adds	r3, #36	@ 0x24
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff feec 	bl	8004504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800472c:	f002 f85e 	bl	80067ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004730:	2301      	movs	r3, #1
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	e000ed04 	.word	0xe000ed04

08004740 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08e      	sub	sp, #56	@ 0x38
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	e7fd      	b.n	8004786 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <xQueueGenericCreateStatic+0x56>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <xQueueGenericCreateStatic+0x5a>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xQueueGenericCreateStatic+0x5c>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10b      	bne.n	80047b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	623b      	str	r3, [r7, #32]
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	e7fd      	b.n	80047b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <xQueueGenericCreateStatic+0x84>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <xQueueGenericCreateStatic+0x88>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <xQueueGenericCreateStatic+0x8a>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	61fb      	str	r3, [r7, #28]
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047e6:	2350      	movs	r3, #80	@ 0x50
 80047e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b50      	cmp	r3, #80	@ 0x50
 80047ee:	d00b      	beq.n	8004808 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	61bb      	str	r3, [r7, #24]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004808:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800480e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00d      	beq.n	8004830 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800481c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f805 	bl	800483a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004832:	4618      	mov	r0, r3
 8004834:	3730      	adds	r7, #48	@ 0x30
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	e002      	b.n	800485c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004868:	2101      	movs	r1, #1
 800486a:	69b8      	ldr	r0, [r7, #24]
 800486c:	f7ff fefe 	bl	800466c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08e      	sub	sp, #56	@ 0x38
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800488e:	2300      	movs	r3, #0
 8004890:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <xQueueGenericSend+0x34>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	e7fd      	b.n	80048b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <xQueueGenericSend+0x42>
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <xQueueGenericSend+0x46>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <xQueueGenericSend+0x48>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <xQueueGenericSend+0x64>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048de:	bf00      	nop
 80048e0:	bf00      	nop
 80048e2:	e7fd      	b.n	80048e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d103      	bne.n	80048f2 <xQueueGenericSend+0x72>
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <xQueueGenericSend+0x76>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <xQueueGenericSend+0x78>
 80048f6:	2300      	movs	r3, #0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10b      	bne.n	8004914 <xQueueGenericSend+0x94>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	623b      	str	r3, [r7, #32]
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004914:	f001 f9ce 	bl	8005cb4 <xTaskGetSchedulerState>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <xQueueGenericSend+0xa4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <xQueueGenericSend+0xa8>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <xQueueGenericSend+0xaa>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <xQueueGenericSend+0xc6>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	61fb      	str	r3, [r7, #28]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004946:	f001 ff1f 	bl	8006788 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <xQueueGenericSend+0xdc>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d129      	bne.n	80049b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004962:	f000 fa0f 	bl	8004d84 <prvCopyDataToQueue>
 8004966:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	2b00      	cmp	r3, #0
 800496e:	d010      	beq.n	8004992 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	3324      	adds	r3, #36	@ 0x24
 8004974:	4618      	mov	r0, r3
 8004976:	f000 ffdd 	bl	8005934 <xTaskRemoveFromEventList>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004980:	4b3f      	ldr	r3, [pc, #252]	@ (8004a80 <xQueueGenericSend+0x200>)
 8004982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	e00a      	b.n	80049a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004998:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <xQueueGenericSend+0x200>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049a8:	f001 ff20 	bl	80067ec <vPortExitCritical>
				return pdPASS;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e063      	b.n	8004a78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049b6:	f001 ff19 	bl	80067ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e05c      	b.n	8004a78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d106      	bne.n	80049d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049c4:	f107 0314 	add.w	r3, r7, #20
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 f817 	bl	80059fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049d2:	f001 ff0b 	bl	80067ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049d6:	f000 fd87 	bl	80054e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049da:	f001 fed5 	bl	8006788 <vPortEnterCritical>
 80049de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049e4:	b25b      	sxtb	r3, r3
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ea:	d103      	bne.n	80049f4 <xQueueGenericSend+0x174>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a00:	d103      	bne.n	8004a0a <xQueueGenericSend+0x18a>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a0a:	f001 feef 	bl	80067ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a0e:	1d3a      	adds	r2, r7, #4
 8004a10:	f107 0314 	add.w	r3, r7, #20
 8004a14:	4611      	mov	r1, r2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 f806 	bl	8005a28 <xTaskCheckForTimeOut>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d124      	bne.n	8004a6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a24:	f000 faa6 	bl	8004f74 <prvIsQueueFull>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	3310      	adds	r3, #16
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 ff2a 	bl	8005890 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a3e:	f000 fa31 	bl	8004ea4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a42:	f000 fd5f 	bl	8005504 <xTaskResumeAll>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f47f af7c 	bne.w	8004946 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a80 <xQueueGenericSend+0x200>)
 8004a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	e772      	b.n	8004946 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a62:	f000 fa1f 	bl	8004ea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a66:	f000 fd4d 	bl	8005504 <xTaskResumeAll>
 8004a6a:	e76c      	b.n	8004946 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a6e:	f000 fa19 	bl	8004ea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a72:	f000 fd47 	bl	8005504 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3738      	adds	r7, #56	@ 0x38
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b090      	sub	sp, #64	@ 0x40
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	e7fd      	b.n	8004ab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x3e>
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <xQueueGenericSendFromISR+0x42>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <xQueueGenericSendFromISR+0x44>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10b      	bne.n	8004ae4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	e7fd      	b.n	8004ae0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d103      	bne.n	8004af2 <xQueueGenericSendFromISR+0x6e>
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <xQueueGenericSendFromISR+0x72>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <xQueueGenericSendFromISR+0x74>
 8004af6:	2300      	movs	r3, #0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	623b      	str	r3, [r7, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	e7fd      	b.n	8004b10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b14:	f001 ff18 	bl	8006948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b18:	f3ef 8211 	mrs	r2, BASEPRI
 8004b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	61fa      	str	r2, [r7, #28]
 8004b2e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <xQueueGenericSendFromISR+0xc2>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d12f      	bne.n	8004ba6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b5c:	f000 f912 	bl	8004d84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b68:	d112      	bne.n	8004b90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d016      	beq.n	8004ba0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b74:	3324      	adds	r3, #36	@ 0x24
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fedc 	bl	8005934 <xTaskRemoveFromEventList>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00e      	beq.n	8004ba0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e007      	b.n	8004ba0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b94:	3301      	adds	r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	b25a      	sxtb	r2, r3
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ba4:	e001      	b.n	8004baa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3740      	adds	r7, #64	@ 0x40
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08c      	sub	sp, #48	@ 0x30
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <xQueueReceive+0x32>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	623b      	str	r3, [r7, #32]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <xQueueReceive+0x40>
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <xQueueReceive+0x44>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <xQueueReceive+0x46>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <xQueueReceive+0x62>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	61fb      	str	r3, [r7, #28]
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c22:	f001 f847 	bl	8005cb4 <xTaskGetSchedulerState>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <xQueueReceive+0x72>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <xQueueReceive+0x76>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <xQueueReceive+0x78>
 8004c36:	2300      	movs	r3, #0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <xQueueReceive+0x94>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	61bb      	str	r3, [r7, #24]
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	e7fd      	b.n	8004c50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c54:	f001 fd98 	bl	8006788 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01f      	beq.n	8004ca4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c68:	f000 f8f6 	bl	8004e58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00f      	beq.n	8004c9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7e:	3310      	adds	r3, #16
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fe57 	bl	8005934 <xTaskRemoveFromEventList>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d80 <xQueueReceive+0x1c0>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c9c:	f001 fda6 	bl	80067ec <vPortExitCritical>
				return pdPASS;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e069      	b.n	8004d78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d103      	bne.n	8004cb2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004caa:	f001 fd9f 	bl	80067ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e062      	b.n	8004d78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cb8:	f107 0310 	add.w	r3, r7, #16
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fe9d 	bl	80059fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cc6:	f001 fd91 	bl	80067ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cca:	f000 fc0d 	bl	80054e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cce:	f001 fd5b 	bl	8006788 <vPortEnterCritical>
 8004cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cd8:	b25b      	sxtb	r3, r3
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cde:	d103      	bne.n	8004ce8 <xQueueReceive+0x128>
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cf4:	d103      	bne.n	8004cfe <xQueueReceive+0x13e>
 8004cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cfe:	f001 fd75 	bl	80067ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d02:	1d3a      	adds	r2, r7, #4
 8004d04:	f107 0310 	add.w	r3, r7, #16
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fe8c 	bl	8005a28 <xTaskCheckForTimeOut>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d123      	bne.n	8004d5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d18:	f000 f916 	bl	8004f48 <prvIsQueueEmpty>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d017      	beq.n	8004d52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d24:	3324      	adds	r3, #36	@ 0x24
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fdb0 	bl	8005890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d32:	f000 f8b7 	bl	8004ea4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d36:	f000 fbe5 	bl	8005504 <xTaskResumeAll>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d189      	bne.n	8004c54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d40:	4b0f      	ldr	r3, [pc, #60]	@ (8004d80 <xQueueReceive+0x1c0>)
 8004d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	e780      	b.n	8004c54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d54:	f000 f8a6 	bl	8004ea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d58:	f000 fbd4 	bl	8005504 <xTaskResumeAll>
 8004d5c:	e77a      	b.n	8004c54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d60:	f000 f8a0 	bl	8004ea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d64:	f000 fbce 	bl	8005504 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d6a:	f000 f8ed 	bl	8004f48 <prvIsQueueEmpty>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f43f af6f 	beq.w	8004c54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3730      	adds	r7, #48	@ 0x30
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	e000ed04 	.word	0xe000ed04

08004d84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d14d      	bne.n	8004e46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 ff9e 	bl	8005cf0 <xTaskPriorityDisinherit>
 8004db4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	e043      	b.n	8004e46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d119      	bne.n	8004df8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6858      	ldr	r0, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	f002 fa5d 	bl	800728e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	441a      	add	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d32b      	bcc.n	8004e46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	e026      	b.n	8004e46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68d8      	ldr	r0, [r3, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e00:	461a      	mov	r2, r3
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	f002 fa43 	bl	800728e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	425b      	negs	r3, r3
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d207      	bcs.n	8004e34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2c:	425b      	negs	r3, r3
 8004e2e:	441a      	add	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d105      	bne.n	8004e46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e4e:	697b      	ldr	r3, [r7, #20]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d018      	beq.n	8004e9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	441a      	add	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d303      	bcc.n	8004e8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68d9      	ldr	r1, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e94:	461a      	mov	r2, r3
 8004e96:	6838      	ldr	r0, [r7, #0]
 8004e98:	f002 f9f9 	bl	800728e <memcpy>
	}
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004eac:	f001 fc6c 	bl	8006788 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004eb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eb8:	e011      	b.n	8004ede <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d012      	beq.n	8004ee8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3324      	adds	r3, #36	@ 0x24
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fd34 	bl	8005934 <xTaskRemoveFromEventList>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ed2:	f000 fe0d 	bl	8005af0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	dce9      	bgt.n	8004eba <prvUnlockQueue+0x16>
 8004ee6:	e000      	b.n	8004eea <prvUnlockQueue+0x46>
					break;
 8004ee8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	22ff      	movs	r2, #255	@ 0xff
 8004eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ef2:	f001 fc7b 	bl	80067ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ef6:	f001 fc47 	bl	8006788 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f02:	e011      	b.n	8004f28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d012      	beq.n	8004f32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3310      	adds	r3, #16
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fd0f 	bl	8005934 <xTaskRemoveFromEventList>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f1c:	f000 fde8 	bl	8005af0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f20:	7bbb      	ldrb	r3, [r7, #14]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	dce9      	bgt.n	8004f04 <prvUnlockQueue+0x60>
 8004f30:	e000      	b.n	8004f34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	22ff      	movs	r2, #255	@ 0xff
 8004f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f3c:	f001 fc56 	bl	80067ec <vPortExitCritical>
}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f50:	f001 fc1a 	bl	8006788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e001      	b.n	8004f66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f66:	f001 fc41 	bl	80067ec <vPortExitCritical>

	return xReturn;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f7c:	f001 fc04 	bl	8006788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d102      	bne.n	8004f92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e001      	b.n	8004f96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f96:	f001 fc29 	bl	80067ec <vPortExitCritical>

	return xReturn;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e014      	b.n	8004fde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff4 <vQueueAddToRegistry+0x50>)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fc0:	490c      	ldr	r1, [pc, #48]	@ (8004ff4 <vQueueAddToRegistry+0x50>)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fca:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff4 <vQueueAddToRegistry+0x50>)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4413      	add	r3, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fd6:	e006      	b.n	8004fe6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b07      	cmp	r3, #7
 8004fe2:	d9e7      	bls.n	8004fb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000894 	.word	0x20000894

08004ff8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005008:	f001 fbbe 	bl	8006788 <vPortEnterCritical>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005012:	b25b      	sxtb	r3, r3
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005018:	d103      	bne.n	8005022 <vQueueWaitForMessageRestricted+0x2a>
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005028:	b25b      	sxtb	r3, r3
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800502e:	d103      	bne.n	8005038 <vQueueWaitForMessageRestricted+0x40>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005038:	f001 fbd8 	bl	80067ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3324      	adds	r3, #36	@ 0x24
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fc45 	bl	80058dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005052:	6978      	ldr	r0, [r7, #20]
 8005054:	f7ff ff26 	bl	8004ea4 <prvUnlockQueue>
	}
 8005058:	bf00      	nop
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	@ 0x38
 8005064:	af04      	add	r7, sp, #16
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800506e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	623b      	str	r3, [r7, #32]
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800508c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10b      	bne.n	80050aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	61fb      	str	r3, [r7, #28]
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	e7fd      	b.n	80050a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050aa:	235c      	movs	r3, #92	@ 0x5c
 80050ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80050b2:	d00b      	beq.n	80050cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	61bb      	str	r3, [r7, #24]
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01e      	beq.n	8005112 <xTaskCreateStatic+0xb2>
 80050d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01b      	beq.n	8005112 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050ec:	2300      	movs	r3, #0
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	9302      	str	r3, [sp, #8]
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f850 	bl	80051aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800510a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800510c:	f000 f8de 	bl	80052cc <prvAddNewTaskToReadyList>
 8005110:	e001      	b.n	8005116 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005116:	697b      	ldr	r3, [r7, #20]
	}
 8005118:	4618      	mov	r0, r3
 800511a:	3728      	adds	r7, #40	@ 0x28
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08c      	sub	sp, #48	@ 0x30
 8005124:	af04      	add	r7, sp, #16
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	4613      	mov	r3, r2
 800512e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fc49 	bl	80069cc <pvPortMalloc>
 800513a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00e      	beq.n	8005160 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005142:	205c      	movs	r0, #92	@ 0x5c
 8005144:	f001 fc42 	bl	80069cc <pvPortMalloc>
 8005148:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	631a      	str	r2, [r3, #48]	@ 0x30
 8005156:	e005      	b.n	8005164 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005158:	6978      	ldr	r0, [r7, #20]
 800515a:	f001 fd05 	bl	8006b68 <vPortFree>
 800515e:	e001      	b.n	8005164 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005160:	2300      	movs	r3, #0
 8005162:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d017      	beq.n	800519a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	2300      	movs	r3, #0
 8005176:	9303      	str	r3, [sp, #12]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	9302      	str	r3, [sp, #8]
 800517c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f80e 	bl	80051aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800518e:	69f8      	ldr	r0, [r7, #28]
 8005190:	f000 f89c 	bl	80052cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005194:	2301      	movs	r3, #1
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	e002      	b.n	80051a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800519a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800519e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051a0:	69bb      	ldr	r3, [r7, #24]
	}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3720      	adds	r7, #32
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b088      	sub	sp, #32
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
 80051b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	461a      	mov	r2, r3
 80051c2:	21a5      	movs	r1, #165	@ 0xa5
 80051c4:	f001 ffe8 	bl	8007198 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051d2:	3b01      	subs	r3, #1
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f023 0307 	bic.w	r3, r3, #7
 80051e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	617b      	str	r3, [r7, #20]
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01f      	beq.n	800524a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	e012      	b.n	8005236 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	7819      	ldrb	r1, [r3, #0]
 8005218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	3334      	adds	r3, #52	@ 0x34
 8005220:	460a      	mov	r2, r1
 8005222:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d006      	beq.n	800523e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	3301      	adds	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	2b0f      	cmp	r3, #15
 800523a:	d9e9      	bls.n	8005210 <prvInitialiseNewTask+0x66>
 800523c:	e000      	b.n	8005240 <prvInitialiseNewTask+0x96>
			{
				break;
 800523e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005248:	e003      	b.n	8005252 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005254:	2b37      	cmp	r3, #55	@ 0x37
 8005256:	d901      	bls.n	800525c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005258:	2337      	movs	r3, #55	@ 0x37
 800525a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005260:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005266:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	2200      	movs	r2, #0
 800526c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	3304      	adds	r3, #4
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff f966 	bl	8004544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	3318      	adds	r3, #24
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff f961 	bl	8004544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005286:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005296:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	2200      	movs	r2, #0
 800529c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	68f9      	ldr	r1, [r7, #12]
 80052aa:	69b8      	ldr	r0, [r7, #24]
 80052ac:	f001 f93e 	bl	800652c <pxPortInitialiseStack>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c2:	bf00      	nop
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052d4:	f001 fa58 	bl	8006788 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005390 <prvAddNewTaskToReadyList+0xc4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	4a2c      	ldr	r2, [pc, #176]	@ (8005390 <prvAddNewTaskToReadyList+0xc4>)
 80052e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005394 <prvAddNewTaskToReadyList+0xc8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005394 <prvAddNewTaskToReadyList+0xc8>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052f0:	4b27      	ldr	r3, [pc, #156]	@ (8005390 <prvAddNewTaskToReadyList+0xc4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d110      	bne.n	800531a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052f8:	f000 fc1e 	bl	8005b38 <prvInitialiseTaskLists>
 80052fc:	e00d      	b.n	800531a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052fe:	4b26      	ldr	r3, [pc, #152]	@ (8005398 <prvAddNewTaskToReadyList+0xcc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005306:	4b23      	ldr	r3, [pc, #140]	@ (8005394 <prvAddNewTaskToReadyList+0xc8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	429a      	cmp	r2, r3
 8005312:	d802      	bhi.n	800531a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005314:	4a1f      	ldr	r2, [pc, #124]	@ (8005394 <prvAddNewTaskToReadyList+0xc8>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800531a:	4b20      	ldr	r3, [pc, #128]	@ (800539c <prvAddNewTaskToReadyList+0xd0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <prvAddNewTaskToReadyList+0xd0>)
 8005322:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005324:	4b1d      	ldr	r3, [pc, #116]	@ (800539c <prvAddNewTaskToReadyList+0xd0>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005330:	4b1b      	ldr	r3, [pc, #108]	@ (80053a0 <prvAddNewTaskToReadyList+0xd4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d903      	bls.n	8005340 <prvAddNewTaskToReadyList+0x74>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	4a18      	ldr	r2, [pc, #96]	@ (80053a0 <prvAddNewTaskToReadyList+0xd4>)
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4a15      	ldr	r2, [pc, #84]	@ (80053a4 <prvAddNewTaskToReadyList+0xd8>)
 800534e:	441a      	add	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7ff f901 	bl	800455e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800535c:	f001 fa46 	bl	80067ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005360:	4b0d      	ldr	r3, [pc, #52]	@ (8005398 <prvAddNewTaskToReadyList+0xcc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005368:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <prvAddNewTaskToReadyList+0xc8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	429a      	cmp	r2, r3
 8005374:	d207      	bcs.n	8005386 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005376:	4b0c      	ldr	r3, [pc, #48]	@ (80053a8 <prvAddNewTaskToReadyList+0xdc>)
 8005378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000da8 	.word	0x20000da8
 8005394:	200008d4 	.word	0x200008d4
 8005398:	20000db4 	.word	0x20000db4
 800539c:	20000dc4 	.word	0x20000dc4
 80053a0:	20000db0 	.word	0x20000db0
 80053a4:	200008d8 	.word	0x200008d8
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d018      	beq.n	80053f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053be:	4b14      	ldr	r3, [pc, #80]	@ (8005410 <vTaskDelay+0x64>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <vTaskDelay+0x32>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60bb      	str	r3, [r7, #8]
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	e7fd      	b.n	80053da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053de:	f000 f883 	bl	80054e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053e2:	2100      	movs	r1, #0
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fcf3 	bl	8005dd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053ea:	f000 f88b 	bl	8005504 <xTaskResumeAll>
 80053ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d107      	bne.n	8005406 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80053f6:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <vTaskDelay+0x68>)
 80053f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000dd0 	.word	0x20000dd0
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	@ 0x28
 800541c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005426:	463a      	mov	r2, r7
 8005428:	1d39      	adds	r1, r7, #4
 800542a:	f107 0308 	add.w	r3, r7, #8
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff f834 	bl	800449c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	9202      	str	r2, [sp, #8]
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	2300      	movs	r3, #0
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	460a      	mov	r2, r1
 8005446:	4922      	ldr	r1, [pc, #136]	@ (80054d0 <vTaskStartScheduler+0xb8>)
 8005448:	4822      	ldr	r0, [pc, #136]	@ (80054d4 <vTaskStartScheduler+0xbc>)
 800544a:	f7ff fe09 	bl	8005060 <xTaskCreateStatic>
 800544e:	4603      	mov	r3, r0
 8005450:	4a21      	ldr	r2, [pc, #132]	@ (80054d8 <vTaskStartScheduler+0xc0>)
 8005452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005454:	4b20      	ldr	r3, [pc, #128]	@ (80054d8 <vTaskStartScheduler+0xc0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800545c:	2301      	movs	r3, #1
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e001      	b.n	8005466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d102      	bne.n	8005472 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800546c:	f000 fd04 	bl	8005e78 <xTimerCreateTimerTask>
 8005470:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d116      	bne.n	80054a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	613b      	str	r3, [r7, #16]
}
 800548a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800548c:	4b13      	ldr	r3, [pc, #76]	@ (80054dc <vTaskStartScheduler+0xc4>)
 800548e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005492:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005494:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <vTaskStartScheduler+0xc8>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800549a:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <vTaskStartScheduler+0xcc>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054a0:	f001 f8ce 	bl	8006640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054a4:	e00f      	b.n	80054c6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ac:	d10b      	bne.n	80054c6 <vTaskStartScheduler+0xae>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60fb      	str	r3, [r7, #12]
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	e7fd      	b.n	80054c2 <vTaskStartScheduler+0xaa>
}
 80054c6:	bf00      	nop
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	0800776c 	.word	0x0800776c
 80054d4:	08005b09 	.word	0x08005b09
 80054d8:	20000dcc 	.word	0x20000dcc
 80054dc:	20000dc8 	.word	0x20000dc8
 80054e0:	20000db4 	.word	0x20000db4
 80054e4:	20000dac 	.word	0x20000dac

080054e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054ec:	4b04      	ldr	r3, [pc, #16]	@ (8005500 <vTaskSuspendAll+0x18>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3301      	adds	r3, #1
 80054f2:	4a03      	ldr	r2, [pc, #12]	@ (8005500 <vTaskSuspendAll+0x18>)
 80054f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054f6:	bf00      	nop
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	20000dd0 	.word	0x20000dd0

08005504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005512:	4b42      	ldr	r3, [pc, #264]	@ (800561c <xTaskResumeAll+0x118>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <xTaskResumeAll+0x2e>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	603b      	str	r3, [r7, #0]
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	e7fd      	b.n	800552e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005532:	f001 f929 	bl	8006788 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005536:	4b39      	ldr	r3, [pc, #228]	@ (800561c <xTaskResumeAll+0x118>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3b01      	subs	r3, #1
 800553c:	4a37      	ldr	r2, [pc, #220]	@ (800561c <xTaskResumeAll+0x118>)
 800553e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005540:	4b36      	ldr	r3, [pc, #216]	@ (800561c <xTaskResumeAll+0x118>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d162      	bne.n	800560e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005548:	4b35      	ldr	r3, [pc, #212]	@ (8005620 <xTaskResumeAll+0x11c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d05e      	beq.n	800560e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005550:	e02f      	b.n	80055b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005552:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <xTaskResumeAll+0x120>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3318      	adds	r3, #24
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff f85a 	bl	8004618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3304      	adds	r3, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff f855 	bl	8004618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005572:	4b2d      	ldr	r3, [pc, #180]	@ (8005628 <xTaskResumeAll+0x124>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d903      	bls.n	8005582 <xTaskResumeAll+0x7e>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	4a2a      	ldr	r2, [pc, #168]	@ (8005628 <xTaskResumeAll+0x124>)
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4a27      	ldr	r2, [pc, #156]	@ (800562c <xTaskResumeAll+0x128>)
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f7fe ffe0 	bl	800455e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a2:	4b23      	ldr	r3, [pc, #140]	@ (8005630 <xTaskResumeAll+0x12c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d302      	bcc.n	80055b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055ac:	4b21      	ldr	r3, [pc, #132]	@ (8005634 <xTaskResumeAll+0x130>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005624 <xTaskResumeAll+0x120>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1cb      	bne.n	8005552 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055c0:	f000 fb58 	bl	8005c74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005638 <xTaskResumeAll+0x134>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055d0:	f000 f846 	bl	8005660 <xTaskIncrementTick>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80055da:	4b16      	ldr	r3, [pc, #88]	@ (8005634 <xTaskResumeAll+0x130>)
 80055dc:	2201      	movs	r2, #1
 80055de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f1      	bne.n	80055d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80055ec:	4b12      	ldr	r3, [pc, #72]	@ (8005638 <xTaskResumeAll+0x134>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055f2:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <xTaskResumeAll+0x130>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055fa:	2301      	movs	r3, #1
 80055fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055fe:	4b0f      	ldr	r3, [pc, #60]	@ (800563c <xTaskResumeAll+0x138>)
 8005600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800560e:	f001 f8ed 	bl	80067ec <vPortExitCritical>

	return xAlreadyYielded;
 8005612:	68bb      	ldr	r3, [r7, #8]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000dd0 	.word	0x20000dd0
 8005620:	20000da8 	.word	0x20000da8
 8005624:	20000d68 	.word	0x20000d68
 8005628:	20000db0 	.word	0x20000db0
 800562c:	200008d8 	.word	0x200008d8
 8005630:	200008d4 	.word	0x200008d4
 8005634:	20000dbc 	.word	0x20000dbc
 8005638:	20000db8 	.word	0x20000db8
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005646:	4b05      	ldr	r3, [pc, #20]	@ (800565c <xTaskGetTickCount+0x1c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800564c:	687b      	ldr	r3, [r7, #4]
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000dac 	.word	0x20000dac

08005660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566a:	4b4f      	ldr	r3, [pc, #316]	@ (80057a8 <xTaskIncrementTick+0x148>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 8090 	bne.w	8005794 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005674:	4b4d      	ldr	r3, [pc, #308]	@ (80057ac <xTaskIncrementTick+0x14c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800567c:	4a4b      	ldr	r2, [pc, #300]	@ (80057ac <xTaskIncrementTick+0x14c>)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d121      	bne.n	80056cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005688:	4b49      	ldr	r3, [pc, #292]	@ (80057b0 <xTaskIncrementTick+0x150>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	603b      	str	r3, [r7, #0]
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	e7fd      	b.n	80056a6 <xTaskIncrementTick+0x46>
 80056aa:	4b41      	ldr	r3, [pc, #260]	@ (80057b0 <xTaskIncrementTick+0x150>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	4b40      	ldr	r3, [pc, #256]	@ (80057b4 <xTaskIncrementTick+0x154>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a3e      	ldr	r2, [pc, #248]	@ (80057b0 <xTaskIncrementTick+0x150>)
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	4a3e      	ldr	r2, [pc, #248]	@ (80057b4 <xTaskIncrementTick+0x154>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	4b3e      	ldr	r3, [pc, #248]	@ (80057b8 <xTaskIncrementTick+0x158>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3301      	adds	r3, #1
 80056c4:	4a3c      	ldr	r2, [pc, #240]	@ (80057b8 <xTaskIncrementTick+0x158>)
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	f000 fad4 	bl	8005c74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056cc:	4b3b      	ldr	r3, [pc, #236]	@ (80057bc <xTaskIncrementTick+0x15c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d349      	bcc.n	800576a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056d6:	4b36      	ldr	r3, [pc, #216]	@ (80057b0 <xTaskIncrementTick+0x150>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e0:	4b36      	ldr	r3, [pc, #216]	@ (80057bc <xTaskIncrementTick+0x15c>)
 80056e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056e6:	601a      	str	r2, [r3, #0]
					break;
 80056e8:	e03f      	b.n	800576a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ea:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <xTaskIncrementTick+0x150>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d203      	bcs.n	800570a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005702:	4a2e      	ldr	r2, [pc, #184]	@ (80057bc <xTaskIncrementTick+0x15c>)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005708:	e02f      	b.n	800576a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	3304      	adds	r3, #4
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe ff82 	bl	8004618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	3318      	adds	r3, #24
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe ff79 	bl	8004618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572a:	4b25      	ldr	r3, [pc, #148]	@ (80057c0 <xTaskIncrementTick+0x160>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d903      	bls.n	800573a <xTaskIncrementTick+0xda>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	4a22      	ldr	r2, [pc, #136]	@ (80057c0 <xTaskIncrementTick+0x160>)
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4a1f      	ldr	r2, [pc, #124]	@ (80057c4 <xTaskIncrementTick+0x164>)
 8005748:	441a      	add	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f7fe ff04 	bl	800455e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575a:	4b1b      	ldr	r3, [pc, #108]	@ (80057c8 <xTaskIncrementTick+0x168>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	429a      	cmp	r2, r3
 8005762:	d3b8      	bcc.n	80056d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005764:	2301      	movs	r3, #1
 8005766:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005768:	e7b5      	b.n	80056d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800576a:	4b17      	ldr	r3, [pc, #92]	@ (80057c8 <xTaskIncrementTick+0x168>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005770:	4914      	ldr	r1, [pc, #80]	@ (80057c4 <xTaskIncrementTick+0x164>)
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d901      	bls.n	8005786 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005782:	2301      	movs	r3, #1
 8005784:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005786:	4b11      	ldr	r3, [pc, #68]	@ (80057cc <xTaskIncrementTick+0x16c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e004      	b.n	800579e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005794:	4b0e      	ldr	r3, [pc, #56]	@ (80057d0 <xTaskIncrementTick+0x170>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	4a0d      	ldr	r2, [pc, #52]	@ (80057d0 <xTaskIncrementTick+0x170>)
 800579c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800579e:	697b      	ldr	r3, [r7, #20]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000dd0 	.word	0x20000dd0
 80057ac:	20000dac 	.word	0x20000dac
 80057b0:	20000d60 	.word	0x20000d60
 80057b4:	20000d64 	.word	0x20000d64
 80057b8:	20000dc0 	.word	0x20000dc0
 80057bc:	20000dc8 	.word	0x20000dc8
 80057c0:	20000db0 	.word	0x20000db0
 80057c4:	200008d8 	.word	0x200008d8
 80057c8:	200008d4 	.word	0x200008d4
 80057cc:	20000dbc 	.word	0x20000dbc
 80057d0:	20000db8 	.word	0x20000db8

080057d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057da:	4b28      	ldr	r3, [pc, #160]	@ (800587c <vTaskSwitchContext+0xa8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057e2:	4b27      	ldr	r3, [pc, #156]	@ (8005880 <vTaskSwitchContext+0xac>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057e8:	e042      	b.n	8005870 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80057ea:	4b25      	ldr	r3, [pc, #148]	@ (8005880 <vTaskSwitchContext+0xac>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f0:	4b24      	ldr	r3, [pc, #144]	@ (8005884 <vTaskSwitchContext+0xb0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	e011      	b.n	800581c <vTaskSwitchContext+0x48>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <vTaskSwitchContext+0x42>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	607b      	str	r3, [r7, #4]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <vTaskSwitchContext+0x3e>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3b01      	subs	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	491a      	ldr	r1, [pc, #104]	@ (8005888 <vTaskSwitchContext+0xb4>)
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0e3      	beq.n	80057f8 <vTaskSwitchContext+0x24>
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4a13      	ldr	r2, [pc, #76]	@ (8005888 <vTaskSwitchContext+0xb4>)
 800583c:	4413      	add	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	3308      	adds	r3, #8
 8005852:	429a      	cmp	r2, r3
 8005854:	d104      	bne.n	8005860 <vTaskSwitchContext+0x8c>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	605a      	str	r2, [r3, #4]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	4a09      	ldr	r2, [pc, #36]	@ (800588c <vTaskSwitchContext+0xb8>)
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	4a06      	ldr	r2, [pc, #24]	@ (8005884 <vTaskSwitchContext+0xb0>)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20000dd0 	.word	0x20000dd0
 8005880:	20000dbc 	.word	0x20000dbc
 8005884:	20000db0 	.word	0x20000db0
 8005888:	200008d8 	.word	0x200008d8
 800588c:	200008d4 	.word	0x200008d4

08005890 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058b8:	4b07      	ldr	r3, [pc, #28]	@ (80058d8 <vTaskPlaceOnEventList+0x48>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3318      	adds	r3, #24
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7fe fe70 	bl	80045a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058c6:	2101      	movs	r1, #1
 80058c8:	6838      	ldr	r0, [r7, #0]
 80058ca:	f000 fa81 	bl	8005dd0 <prvAddCurrentTaskToDelayedList>
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	200008d4 	.word	0x200008d4

080058dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	617b      	str	r3, [r7, #20]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005906:	4b0a      	ldr	r3, [pc, #40]	@ (8005930 <vTaskPlaceOnEventListRestricted+0x54>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3318      	adds	r3, #24
 800590c:	4619      	mov	r1, r3
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f7fe fe25 	bl	800455e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800591a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800591e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	68b8      	ldr	r0, [r7, #8]
 8005924:	f000 fa54 	bl	8005dd0 <prvAddCurrentTaskToDelayedList>
	}
 8005928:	bf00      	nop
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	200008d4 	.word	0x200008d4

08005934 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	60fb      	str	r3, [r7, #12]
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	e7fd      	b.n	800595e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3318      	adds	r3, #24
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe fe56 	bl	8004618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800596c:	4b1d      	ldr	r3, [pc, #116]	@ (80059e4 <xTaskRemoveFromEventList+0xb0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11d      	bne.n	80059b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	3304      	adds	r3, #4
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fe4d 	bl	8004618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005982:	4b19      	ldr	r3, [pc, #100]	@ (80059e8 <xTaskRemoveFromEventList+0xb4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d903      	bls.n	8005992 <xTaskRemoveFromEventList+0x5e>
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598e:	4a16      	ldr	r2, [pc, #88]	@ (80059e8 <xTaskRemoveFromEventList+0xb4>)
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a13      	ldr	r2, [pc, #76]	@ (80059ec <xTaskRemoveFromEventList+0xb8>)
 80059a0:	441a      	add	r2, r3
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe fdd8 	bl	800455e <vListInsertEnd>
 80059ae:	e005      	b.n	80059bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	3318      	adds	r3, #24
 80059b4:	4619      	mov	r1, r3
 80059b6:	480e      	ldr	r0, [pc, #56]	@ (80059f0 <xTaskRemoveFromEventList+0xbc>)
 80059b8:	f7fe fdd1 	bl	800455e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c0:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <xTaskRemoveFromEventList+0xc0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d905      	bls.n	80059d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059ce:	4b0a      	ldr	r3, [pc, #40]	@ (80059f8 <xTaskRemoveFromEventList+0xc4>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e001      	b.n	80059da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059da:	697b      	ldr	r3, [r7, #20]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000dd0 	.word	0x20000dd0
 80059e8:	20000db0 	.word	0x20000db0
 80059ec:	200008d8 	.word	0x200008d8
 80059f0:	20000d68 	.word	0x20000d68
 80059f4:	200008d4 	.word	0x200008d4
 80059f8:	20000dbc 	.word	0x20000dbc

080059fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a04:	4b06      	ldr	r3, [pc, #24]	@ (8005a20 <vTaskInternalSetTimeOutState+0x24>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a0c:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <vTaskInternalSetTimeOutState+0x28>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	605a      	str	r2, [r3, #4]
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000dc0 	.word	0x20000dc0
 8005a24:	20000dac 	.word	0x20000dac

08005a28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	613b      	str	r3, [r7, #16]
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	60fb      	str	r3, [r7, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a6e:	f000 fe8b 	bl	8006788 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a72:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae8 <xTaskCheckForTimeOut+0xc0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a8a:	d102      	bne.n	8005a92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	e023      	b.n	8005ada <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4b15      	ldr	r3, [pc, #84]	@ (8005aec <xTaskCheckForTimeOut+0xc4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d007      	beq.n	8005aae <xTaskCheckForTimeOut+0x86>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	e015      	b.n	8005ada <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d20b      	bcs.n	8005ad0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff ff99 	bl	80059fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	e004      	b.n	8005ada <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ada:	f000 fe87 	bl	80067ec <vPortExitCritical>

	return xReturn;
 8005ade:	69fb      	ldr	r3, [r7, #28]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000dac 	.word	0x20000dac
 8005aec:	20000dc0 	.word	0x20000dc0

08005af0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005af4:	4b03      	ldr	r3, [pc, #12]	@ (8005b04 <vTaskMissedYield+0x14>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
}
 8005afa:	bf00      	nop
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	20000dbc 	.word	0x20000dbc

08005b08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b10:	f000 f852 	bl	8005bb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b14:	4b06      	ldr	r3, [pc, #24]	@ (8005b30 <prvIdleTask+0x28>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d9f9      	bls.n	8005b10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b1c:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <prvIdleTask+0x2c>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b2c:	e7f0      	b.n	8005b10 <prvIdleTask+0x8>
 8005b2e:	bf00      	nop
 8005b30:	200008d8 	.word	0x200008d8
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b3e:	2300      	movs	r3, #0
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	e00c      	b.n	8005b5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4a12      	ldr	r2, [pc, #72]	@ (8005b98 <prvInitialiseTaskLists+0x60>)
 8005b50:	4413      	add	r3, r2
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fcd6 	bl	8004504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	607b      	str	r3, [r7, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b37      	cmp	r3, #55	@ 0x37
 8005b62:	d9ef      	bls.n	8005b44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b64:	480d      	ldr	r0, [pc, #52]	@ (8005b9c <prvInitialiseTaskLists+0x64>)
 8005b66:	f7fe fccd 	bl	8004504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b6a:	480d      	ldr	r0, [pc, #52]	@ (8005ba0 <prvInitialiseTaskLists+0x68>)
 8005b6c:	f7fe fcca 	bl	8004504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b70:	480c      	ldr	r0, [pc, #48]	@ (8005ba4 <prvInitialiseTaskLists+0x6c>)
 8005b72:	f7fe fcc7 	bl	8004504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b76:	480c      	ldr	r0, [pc, #48]	@ (8005ba8 <prvInitialiseTaskLists+0x70>)
 8005b78:	f7fe fcc4 	bl	8004504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b7c:	480b      	ldr	r0, [pc, #44]	@ (8005bac <prvInitialiseTaskLists+0x74>)
 8005b7e:	f7fe fcc1 	bl	8004504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b82:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb0 <prvInitialiseTaskLists+0x78>)
 8005b84:	4a05      	ldr	r2, [pc, #20]	@ (8005b9c <prvInitialiseTaskLists+0x64>)
 8005b86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b88:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb4 <prvInitialiseTaskLists+0x7c>)
 8005b8a:	4a05      	ldr	r2, [pc, #20]	@ (8005ba0 <prvInitialiseTaskLists+0x68>)
 8005b8c:	601a      	str	r2, [r3, #0]
}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200008d8 	.word	0x200008d8
 8005b9c:	20000d38 	.word	0x20000d38
 8005ba0:	20000d4c 	.word	0x20000d4c
 8005ba4:	20000d68 	.word	0x20000d68
 8005ba8:	20000d7c 	.word	0x20000d7c
 8005bac:	20000d94 	.word	0x20000d94
 8005bb0:	20000d60 	.word	0x20000d60
 8005bb4:	20000d64 	.word	0x20000d64

08005bb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bbe:	e019      	b.n	8005bf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bc0:	f000 fde2 	bl	8006788 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc4:	4b10      	ldr	r3, [pc, #64]	@ (8005c08 <prvCheckTasksWaitingTermination+0x50>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fd21 	bl	8004618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c0c <prvCheckTasksWaitingTermination+0x54>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8005c0c <prvCheckTasksWaitingTermination+0x54>)
 8005bde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <prvCheckTasksWaitingTermination+0x58>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c10 <prvCheckTasksWaitingTermination+0x58>)
 8005be8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bea:	f000 fdff 	bl	80067ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f810 	bl	8005c14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bf4:	4b06      	ldr	r3, [pc, #24]	@ (8005c10 <prvCheckTasksWaitingTermination+0x58>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e1      	bne.n	8005bc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000d7c 	.word	0x20000d7c
 8005c0c:	20000da8 	.word	0x20000da8
 8005c10:	20000d90 	.word	0x20000d90

08005c14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d108      	bne.n	8005c38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 ff9c 	bl	8006b68 <vPortFree>
				vPortFree( pxTCB );
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 ff99 	bl	8006b68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c36:	e019      	b.n	8005c6c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d103      	bne.n	8005c4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 ff90 	bl	8006b68 <vPortFree>
	}
 8005c48:	e010      	b.n	8005c6c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d00b      	beq.n	8005c6c <prvDeleteTCB+0x58>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60fb      	str	r3, [r7, #12]
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <prvDeleteTCB+0x54>
	}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005cac <prvResetNextTaskUnblockTime+0x38>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c84:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c8c:	e008      	b.n	8005ca0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8e:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <prvResetNextTaskUnblockTime+0x38>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	4a04      	ldr	r2, [pc, #16]	@ (8005cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c9e:	6013      	str	r3, [r2, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	20000d60 	.word	0x20000d60
 8005cb0:	20000dc8 	.word	0x20000dc8

08005cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cba:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce8 <xTaskGetSchedulerState+0x34>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d102      	bne.n	8005cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	607b      	str	r3, [r7, #4]
 8005cc6:	e008      	b.n	8005cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc8:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <xTaskGetSchedulerState+0x38>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	e001      	b.n	8005cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cda:	687b      	ldr	r3, [r7, #4]
	}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20000db4 	.word	0x20000db4
 8005cec:	20000dd0 	.word	0x20000dd0

08005cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d058      	beq.n	8005db8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d06:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc4 <xTaskPriorityDisinherit+0xd4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d00b      	beq.n	8005d28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	60bb      	str	r3, [r7, #8]
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	e7fd      	b.n	8005d44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4c:	1e5a      	subs	r2, r3, #1
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d02c      	beq.n	8005db8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d128      	bne.n	8005db8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fc54 	bl	8004618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d88:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <xTaskPriorityDisinherit+0xd8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d903      	bls.n	8005d98 <xTaskPriorityDisinherit+0xa8>
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc8 <xTaskPriorityDisinherit+0xd8>)
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4a09      	ldr	r2, [pc, #36]	@ (8005dcc <xTaskPriorityDisinherit+0xdc>)
 8005da6:	441a      	add	r2, r3
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4619      	mov	r1, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	f7fe fbd5 	bl	800455e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005db8:	697b      	ldr	r3, [r7, #20]
	}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200008d4 	.word	0x200008d4
 8005dc8:	20000db0 	.word	0x20000db0
 8005dcc:	200008d8 	.word	0x200008d8

08005dd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dda:	4b21      	ldr	r3, [pc, #132]	@ (8005e60 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005de0:	4b20      	ldr	r3, [pc, #128]	@ (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fc16 	bl	8004618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005df2:	d10a      	bne.n	8005e0a <prvAddCurrentTaskToDelayedList+0x3a>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4819      	ldr	r0, [pc, #100]	@ (8005e68 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e04:	f7fe fbab 	bl	800455e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e08:	e026      	b.n	8005e58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e12:	4b14      	ldr	r3, [pc, #80]	@ (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d209      	bcs.n	8005e36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e22:	4b12      	ldr	r3, [pc, #72]	@ (8005e6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b0f      	ldr	r3, [pc, #60]	@ (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	f7fe fbb9 	bl	80045a6 <vListInsert>
}
 8005e34:	e010      	b.n	8005e58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e36:	4b0e      	ldr	r3, [pc, #56]	@ (8005e70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7fe fbaf 	bl	80045a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e48:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d202      	bcs.n	8005e58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e52:	4a08      	ldr	r2, [pc, #32]	@ (8005e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	6013      	str	r3, [r2, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000dac 	.word	0x20000dac
 8005e64:	200008d4 	.word	0x200008d4
 8005e68:	20000d94 	.word	0x20000d94
 8005e6c:	20000d64 	.word	0x20000d64
 8005e70:	20000d60 	.word	0x20000d60
 8005e74:	20000dc8 	.word	0x20000dc8

08005e78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	@ 0x28
 8005e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e82:	f000 fb13 	bl	80064ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e86:	4b1d      	ldr	r3, [pc, #116]	@ (8005efc <xTimerCreateTimerTask+0x84>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d021      	beq.n	8005ed2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e96:	1d3a      	adds	r2, r7, #4
 8005e98:	f107 0108 	add.w	r1, r7, #8
 8005e9c:	f107 030c 	add.w	r3, r7, #12
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fb15 	bl	80044d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	9202      	str	r2, [sp, #8]
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	4911      	ldr	r1, [pc, #68]	@ (8005f00 <xTimerCreateTimerTask+0x88>)
 8005eba:	4812      	ldr	r0, [pc, #72]	@ (8005f04 <xTimerCreateTimerTask+0x8c>)
 8005ebc:	f7ff f8d0 	bl	8005060 <xTaskCreateStatic>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	4a11      	ldr	r2, [pc, #68]	@ (8005f08 <xTimerCreateTimerTask+0x90>)
 8005ec4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ec6:	4b10      	ldr	r3, [pc, #64]	@ (8005f08 <xTimerCreateTimerTask+0x90>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10b      	bne.n	8005ef0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	613b      	str	r3, [r7, #16]
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	e7fd      	b.n	8005eec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ef0:	697b      	ldr	r3, [r7, #20]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000e04 	.word	0x20000e04
 8005f00:	08007774 	.word	0x08007774
 8005f04:	08006045 	.word	0x08006045
 8005f08:	20000e08 	.word	0x20000e08

08005f0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	@ 0x28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <xTimerGenericCommand+0x30>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	623b      	str	r3, [r7, #32]
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	e7fd      	b.n	8005f38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f3c:	4b19      	ldr	r3, [pc, #100]	@ (8005fa4 <xTimerGenericCommand+0x98>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02a      	beq.n	8005f9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	dc18      	bgt.n	8005f88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f56:	f7ff fead 	bl	8005cb4 <xTaskGetSchedulerState>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d109      	bne.n	8005f74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f60:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <xTimerGenericCommand+0x98>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	f107 0110 	add.w	r1, r7, #16
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f6c:	f7fe fc88 	bl	8004880 <xQueueGenericSend>
 8005f70:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f72:	e012      	b.n	8005f9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f74:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa4 <xTimerGenericCommand+0x98>)
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	f107 0110 	add.w	r1, r7, #16
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f7fe fc7e 	bl	8004880 <xQueueGenericSend>
 8005f84:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f86:	e008      	b.n	8005f9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f88:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <xTimerGenericCommand+0x98>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	f107 0110 	add.w	r1, r7, #16
 8005f90:	2300      	movs	r3, #0
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	f7fe fd76 	bl	8004a84 <xQueueGenericSendFromISR>
 8005f98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3728      	adds	r7, #40	@ 0x28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000e04 	.word	0x20000e04

08005fa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb2:	4b23      	ldr	r3, [pc, #140]	@ (8006040 <prvProcessExpiredTimer+0x98>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fb29 	bl	8004618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d023      	beq.n	800601c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	699a      	ldr	r2, [r3, #24]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	18d1      	adds	r1, r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	6978      	ldr	r0, [r7, #20]
 8005fe2:	f000 f8d5 	bl	8006190 <prvInsertTimerInActiveList>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d020      	beq.n	800602e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fec:	2300      	movs	r3, #0
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	6978      	ldr	r0, [r7, #20]
 8005ff8:	f7ff ff88 	bl	8005f0c <xTimerGenericCommand>
 8005ffc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d114      	bne.n	800602e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	60fb      	str	r3, [r7, #12]
}
 8006016:	bf00      	nop
 8006018:	bf00      	nop
 800601a:	e7fd      	b.n	8006018 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006022:	f023 0301 	bic.w	r3, r3, #1
 8006026:	b2da      	uxtb	r2, r3
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	6978      	ldr	r0, [r7, #20]
 8006034:	4798      	blx	r3
}
 8006036:	bf00      	nop
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000dfc 	.word	0x20000dfc

08006044 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800604c:	f107 0308 	add.w	r3, r7, #8
 8006050:	4618      	mov	r0, r3
 8006052:	f000 f859 	bl	8006108 <prvGetNextExpireTime>
 8006056:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4619      	mov	r1, r3
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f805 	bl	800606c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006062:	f000 f8d7 	bl	8006214 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006066:	bf00      	nop
 8006068:	e7f0      	b.n	800604c <prvTimerTask+0x8>
	...

0800606c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006076:	f7ff fa37 	bl	80054e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800607a:	f107 0308 	add.w	r3, r7, #8
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f866 	bl	8006150 <prvSampleTimeNow>
 8006084:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d130      	bne.n	80060ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <prvProcessTimerOrBlockTask+0x3c>
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	429a      	cmp	r2, r3
 8006098:	d806      	bhi.n	80060a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800609a:	f7ff fa33 	bl	8005504 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff ff81 	bl	8005fa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060a6:	e024      	b.n	80060f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d008      	beq.n	80060c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060ae:	4b13      	ldr	r3, [pc, #76]	@ (80060fc <prvProcessTimerOrBlockTask+0x90>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <prvProcessTimerOrBlockTask+0x50>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <prvProcessTimerOrBlockTask+0x52>
 80060bc:	2300      	movs	r3, #0
 80060be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006100 <prvProcessTimerOrBlockTask+0x94>)
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	4619      	mov	r1, r3
 80060ce:	f7fe ff93 	bl	8004ff8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060d2:	f7ff fa17 	bl	8005504 <xTaskResumeAll>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060dc:	4b09      	ldr	r3, [pc, #36]	@ (8006104 <prvProcessTimerOrBlockTask+0x98>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	f3bf 8f6f 	isb	sy
}
 80060ec:	e001      	b.n	80060f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060ee:	f7ff fa09 	bl	8005504 <xTaskResumeAll>
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000e00 	.word	0x20000e00
 8006100:	20000e04 	.word	0x20000e04
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006110:	4b0e      	ldr	r3, [pc, #56]	@ (800614c <prvGetNextExpireTime+0x44>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <prvGetNextExpireTime+0x16>
 800611a:	2201      	movs	r2, #1
 800611c:	e000      	b.n	8006120 <prvGetNextExpireTime+0x18>
 800611e:	2200      	movs	r2, #0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d105      	bne.n	8006138 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800612c:	4b07      	ldr	r3, [pc, #28]	@ (800614c <prvGetNextExpireTime+0x44>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	e001      	b.n	800613c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800613c:	68fb      	ldr	r3, [r7, #12]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000dfc 	.word	0x20000dfc

08006150 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006158:	f7ff fa72 	bl	8005640 <xTaskGetTickCount>
 800615c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800615e:	4b0b      	ldr	r3, [pc, #44]	@ (800618c <prvSampleTimeNow+0x3c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	429a      	cmp	r2, r3
 8006166:	d205      	bcs.n	8006174 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006168:	f000 f93a 	bl	80063e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e002      	b.n	800617a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800617a:	4a04      	ldr	r2, [pc, #16]	@ (800618c <prvSampleTimeNow+0x3c>)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006180:	68fb      	ldr	r3, [r7, #12]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000e0c 	.word	0x20000e0c

08006190 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d812      	bhi.n	80061dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d302      	bcc.n	80061ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e01b      	b.n	8006202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061ca:	4b10      	ldr	r3, [pc, #64]	@ (800620c <prvInsertTimerInActiveList+0x7c>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7fe f9e6 	bl	80045a6 <vListInsert>
 80061da:	e012      	b.n	8006202 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d206      	bcs.n	80061f2 <prvInsertTimerInActiveList+0x62>
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d302      	bcc.n	80061f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061ec:	2301      	movs	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	e007      	b.n	8006202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061f2:	4b07      	ldr	r3, [pc, #28]	@ (8006210 <prvInsertTimerInActiveList+0x80>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fe f9d2 	bl	80045a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006202:	697b      	ldr	r3, [r7, #20]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000e00 	.word	0x20000e00
 8006210:	20000dfc 	.word	0x20000dfc

08006214 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08e      	sub	sp, #56	@ 0x38
 8006218:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800621a:	e0ce      	b.n	80063ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	da19      	bge.n	8006256 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006222:	1d3b      	adds	r3, r7, #4
 8006224:	3304      	adds	r3, #4
 8006226:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	61fb      	str	r3, [r7, #28]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624c:	6850      	ldr	r0, [r2, #4]
 800624e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006250:	6892      	ldr	r2, [r2, #8]
 8006252:	4611      	mov	r1, r2
 8006254:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f2c0 80ae 	blt.w	80063ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626c:	3304      	adds	r3, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe f9d2 	bl	8004618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006274:	463b      	mov	r3, r7
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff ff6a 	bl	8006150 <prvSampleTimeNow>
 800627c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b09      	cmp	r3, #9
 8006282:	f200 8097 	bhi.w	80063b4 <prvProcessReceivedCommands+0x1a0>
 8006286:	a201      	add	r2, pc, #4	@ (adr r2, 800628c <prvProcessReceivedCommands+0x78>)
 8006288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628c:	080062b5 	.word	0x080062b5
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062b5 	.word	0x080062b5
 8006298:	0800632b 	.word	0x0800632b
 800629c:	0800633f 	.word	0x0800633f
 80062a0:	0800638b 	.word	0x0800638b
 80062a4:	080062b5 	.word	0x080062b5
 80062a8:	080062b5 	.word	0x080062b5
 80062ac:	0800632b 	.word	0x0800632b
 80062b0:	0800633f 	.word	0x0800633f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062ba:	f043 0301 	orr.w	r3, r3, #1
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	18d1      	adds	r1, r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062d4:	f7ff ff5c 	bl	8006190 <prvInsertTimerInActiveList>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d06c      	beq.n	80063b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d061      	beq.n	80063b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	441a      	add	r2, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	2300      	movs	r3, #0
 8006302:	2100      	movs	r1, #0
 8006304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006306:	f7ff fe01 	bl	8005f0c <xTimerGenericCommand>
 800630a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d152      	bne.n	80063b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	61bb      	str	r3, [r7, #24]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800633c:	e03d      	b.n	80063ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006354:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	617b      	str	r3, [r7, #20]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	18d1      	adds	r1, r2, r3
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006384:	f7ff ff04 	bl	8006190 <prvInsertTimerInActiveList>
					break;
 8006388:	e017      	b.n	80063ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800638a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800639a:	f000 fbe5 	bl	8006b68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800639e:	e00c      	b.n	80063ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063a6:	f023 0301 	bic.w	r3, r3, #1
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063b2:	e002      	b.n	80063ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80063b4:	bf00      	nop
 80063b6:	e000      	b.n	80063ba <prvProcessReceivedCommands+0x1a6>
					break;
 80063b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063ba:	4b08      	ldr	r3, [pc, #32]	@ (80063dc <prvProcessReceivedCommands+0x1c8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	1d39      	adds	r1, r7, #4
 80063c0:	2200      	movs	r2, #0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fbfc 	bl	8004bc0 <xQueueReceive>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f47f af26 	bne.w	800621c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	3730      	adds	r7, #48	@ 0x30
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000e04 	.word	0x20000e04

080063e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063e6:	e049      	b.n	800647c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063e8:	4b2e      	ldr	r3, [pc, #184]	@ (80064a4 <prvSwitchTimerLists+0xc4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f2:	4b2c      	ldr	r3, [pc, #176]	@ (80064a4 <prvSwitchTimerLists+0xc4>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe f909 	bl	8004618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d02f      	beq.n	800647c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4413      	add	r3, r2
 8006424:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	429a      	cmp	r2, r3
 800642c:	d90e      	bls.n	800644c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800643a:	4b1a      	ldr	r3, [pc, #104]	@ (80064a4 <prvSwitchTimerLists+0xc4>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f7fe f8ae 	bl	80045a6 <vListInsert>
 800644a:	e017      	b.n	800647c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	2300      	movs	r3, #0
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	2100      	movs	r1, #0
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff fd58 	bl	8005f0c <xTimerGenericCommand>
 800645c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10b      	bne.n	800647c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	603b      	str	r3, [r7, #0]
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	e7fd      	b.n	8006478 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800647c:	4b09      	ldr	r3, [pc, #36]	@ (80064a4 <prvSwitchTimerLists+0xc4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1b0      	bne.n	80063e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006486:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <prvSwitchTimerLists+0xc4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800648c:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <prvSwitchTimerLists+0xc8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a04      	ldr	r2, [pc, #16]	@ (80064a4 <prvSwitchTimerLists+0xc4>)
 8006492:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006494:	4a04      	ldr	r2, [pc, #16]	@ (80064a8 <prvSwitchTimerLists+0xc8>)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	6013      	str	r3, [r2, #0]
}
 800649a:	bf00      	nop
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000dfc 	.word	0x20000dfc
 80064a8:	20000e00 	.word	0x20000e00

080064ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064b2:	f000 f969 	bl	8006788 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064b6:	4b15      	ldr	r3, [pc, #84]	@ (800650c <prvCheckForValidListAndQueue+0x60>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d120      	bne.n	8006500 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064be:	4814      	ldr	r0, [pc, #80]	@ (8006510 <prvCheckForValidListAndQueue+0x64>)
 80064c0:	f7fe f820 	bl	8004504 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064c4:	4813      	ldr	r0, [pc, #76]	@ (8006514 <prvCheckForValidListAndQueue+0x68>)
 80064c6:	f7fe f81d 	bl	8004504 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064ca:	4b13      	ldr	r3, [pc, #76]	@ (8006518 <prvCheckForValidListAndQueue+0x6c>)
 80064cc:	4a10      	ldr	r2, [pc, #64]	@ (8006510 <prvCheckForValidListAndQueue+0x64>)
 80064ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064d0:	4b12      	ldr	r3, [pc, #72]	@ (800651c <prvCheckForValidListAndQueue+0x70>)
 80064d2:	4a10      	ldr	r2, [pc, #64]	@ (8006514 <prvCheckForValidListAndQueue+0x68>)
 80064d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064d6:	2300      	movs	r3, #0
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	4b11      	ldr	r3, [pc, #68]	@ (8006520 <prvCheckForValidListAndQueue+0x74>)
 80064dc:	4a11      	ldr	r2, [pc, #68]	@ (8006524 <prvCheckForValidListAndQueue+0x78>)
 80064de:	2110      	movs	r1, #16
 80064e0:	200a      	movs	r0, #10
 80064e2:	f7fe f92d 	bl	8004740 <xQueueGenericCreateStatic>
 80064e6:	4603      	mov	r3, r0
 80064e8:	4a08      	ldr	r2, [pc, #32]	@ (800650c <prvCheckForValidListAndQueue+0x60>)
 80064ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064ec:	4b07      	ldr	r3, [pc, #28]	@ (800650c <prvCheckForValidListAndQueue+0x60>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <prvCheckForValidListAndQueue+0x60>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	490b      	ldr	r1, [pc, #44]	@ (8006528 <prvCheckForValidListAndQueue+0x7c>)
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fd52 	bl	8004fa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006500:	f000 f974 	bl	80067ec <vPortExitCritical>
}
 8006504:	bf00      	nop
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000e04 	.word	0x20000e04
 8006510:	20000dd4 	.word	0x20000dd4
 8006514:	20000de8 	.word	0x20000de8
 8006518:	20000dfc 	.word	0x20000dfc
 800651c:	20000e00 	.word	0x20000e00
 8006520:	20000eb0 	.word	0x20000eb0
 8006524:	20000e10 	.word	0x20000e10
 8006528:	0800777c 	.word	0x0800777c

0800652c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3b04      	subs	r3, #4
 800653c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b04      	subs	r3, #4
 800654a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f023 0201 	bic.w	r2, r3, #1
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3b04      	subs	r3, #4
 800655a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800655c:	4a0c      	ldr	r2, [pc, #48]	@ (8006590 <pxPortInitialiseStack+0x64>)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b14      	subs	r3, #20
 8006566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3b04      	subs	r3, #4
 8006572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f06f 0202 	mvn.w	r2, #2
 800657a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3b20      	subs	r3, #32
 8006580:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006582:	68fb      	ldr	r3, [r7, #12]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	08006595 	.word	0x08006595

08006594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800659e:	4b13      	ldr	r3, [pc, #76]	@ (80065ec <prvTaskExitError+0x58>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065a6:	d00b      	beq.n	80065c0 <prvTaskExitError+0x2c>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	60fb      	str	r3, [r7, #12]
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <prvTaskExitError+0x28>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	60bb      	str	r3, [r7, #8]
}
 80065d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065d4:	bf00      	nop
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0fc      	beq.n	80065d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	2000000c 	.word	0x2000000c

080065f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065f0:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <pxCurrentTCBConst2>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	f380 8809 	msr	PSP, r0
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	4770      	bx	lr
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst2>:
 8006610:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006618:	4808      	ldr	r0, [pc, #32]	@ (800663c <prvPortStartFirstTask+0x24>)
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	6800      	ldr	r0, [r0, #0]
 800661e:	f380 8808 	msr	MSP, r0
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8814 	msr	CONTROL, r0
 800662a:	b662      	cpsie	i
 800662c:	b661      	cpsie	f
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	df00      	svc	0
 8006638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800663a:	bf00      	nop
 800663c:	e000ed08 	.word	0xe000ed08

08006640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006646:	4b47      	ldr	r3, [pc, #284]	@ (8006764 <xPortStartScheduler+0x124>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a47      	ldr	r2, [pc, #284]	@ (8006768 <xPortStartScheduler+0x128>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10b      	bne.n	8006668 <xPortStartScheduler+0x28>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	613b      	str	r3, [r7, #16]
}
 8006662:	bf00      	nop
 8006664:	bf00      	nop
 8006666:	e7fd      	b.n	8006664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006668:	4b3e      	ldr	r3, [pc, #248]	@ (8006764 <xPortStartScheduler+0x124>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a3f      	ldr	r2, [pc, #252]	@ (800676c <xPortStartScheduler+0x12c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d10b      	bne.n	800668a <xPortStartScheduler+0x4a>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60fb      	str	r3, [r7, #12]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800668a:	4b39      	ldr	r3, [pc, #228]	@ (8006770 <xPortStartScheduler+0x130>)
 800668c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	22ff      	movs	r2, #255	@ 0xff
 800669a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	4b31      	ldr	r3, [pc, #196]	@ (8006774 <xPortStartScheduler+0x134>)
 80066b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066b2:	4b31      	ldr	r3, [pc, #196]	@ (8006778 <xPortStartScheduler+0x138>)
 80066b4:	2207      	movs	r2, #7
 80066b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066b8:	e009      	b.n	80066ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80066ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006778 <xPortStartScheduler+0x138>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3b01      	subs	r3, #1
 80066c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006778 <xPortStartScheduler+0x138>)
 80066c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d0ef      	beq.n	80066ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066da:	4b27      	ldr	r3, [pc, #156]	@ (8006778 <xPortStartScheduler+0x138>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1c3 0307 	rsb	r3, r3, #7
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d00b      	beq.n	80066fe <xPortStartScheduler+0xbe>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006778 <xPortStartScheduler+0x138>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	4a1c      	ldr	r2, [pc, #112]	@ (8006778 <xPortStartScheduler+0x138>)
 8006706:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006708:	4b1b      	ldr	r3, [pc, #108]	@ (8006778 <xPortStartScheduler+0x138>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006710:	4a19      	ldr	r2, [pc, #100]	@ (8006778 <xPortStartScheduler+0x138>)
 8006712:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	b2da      	uxtb	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800671c:	4b17      	ldr	r3, [pc, #92]	@ (800677c <xPortStartScheduler+0x13c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a16      	ldr	r2, [pc, #88]	@ (800677c <xPortStartScheduler+0x13c>)
 8006722:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006726:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006728:	4b14      	ldr	r3, [pc, #80]	@ (800677c <xPortStartScheduler+0x13c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a13      	ldr	r2, [pc, #76]	@ (800677c <xPortStartScheduler+0x13c>)
 800672e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006732:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006734:	f000 f8da 	bl	80068ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006738:	4b11      	ldr	r3, [pc, #68]	@ (8006780 <xPortStartScheduler+0x140>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800673e:	f000 f8f9 	bl	8006934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006742:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <xPortStartScheduler+0x144>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a0f      	ldr	r2, [pc, #60]	@ (8006784 <xPortStartScheduler+0x144>)
 8006748:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800674c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800674e:	f7ff ff63 	bl	8006618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006752:	f7ff f83f 	bl	80057d4 <vTaskSwitchContext>
	prvTaskExitError();
 8006756:	f7ff ff1d 	bl	8006594 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	e000ed00 	.word	0xe000ed00
 8006768:	410fc271 	.word	0x410fc271
 800676c:	410fc270 	.word	0x410fc270
 8006770:	e000e400 	.word	0xe000e400
 8006774:	20000f00 	.word	0x20000f00
 8006778:	20000f04 	.word	0x20000f04
 800677c:	e000ed20 	.word	0xe000ed20
 8006780:	2000000c 	.word	0x2000000c
 8006784:	e000ef34 	.word	0xe000ef34

08006788 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	607b      	str	r3, [r7, #4]
}
 80067a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067a2:	4b10      	ldr	r3, [pc, #64]	@ (80067e4 <vPortEnterCritical+0x5c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	4a0e      	ldr	r2, [pc, #56]	@ (80067e4 <vPortEnterCritical+0x5c>)
 80067aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067ac:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <vPortEnterCritical+0x5c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d110      	bne.n	80067d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067b4:	4b0c      	ldr	r3, [pc, #48]	@ (80067e8 <vPortEnterCritical+0x60>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00b      	beq.n	80067d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	603b      	str	r3, [r7, #0]
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	e7fd      	b.n	80067d2 <vPortEnterCritical+0x4a>
	}
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	2000000c 	.word	0x2000000c
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067f2:	4b12      	ldr	r3, [pc, #72]	@ (800683c <vPortExitCritical+0x50>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10b      	bne.n	8006812 <vPortExitCritical+0x26>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
}
 800680c:	bf00      	nop
 800680e:	bf00      	nop
 8006810:	e7fd      	b.n	800680e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006812:	4b0a      	ldr	r3, [pc, #40]	@ (800683c <vPortExitCritical+0x50>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3b01      	subs	r3, #1
 8006818:	4a08      	ldr	r2, [pc, #32]	@ (800683c <vPortExitCritical+0x50>)
 800681a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800681c:	4b07      	ldr	r3, [pc, #28]	@ (800683c <vPortExitCritical+0x50>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <vPortExitCritical+0x44>
 8006824:	2300      	movs	r3, #0
 8006826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f383 8811 	msr	BASEPRI, r3
}
 800682e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	2000000c 	.word	0x2000000c

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f01e 0f10 	tst.w	lr, #16
 8006850:	bf08      	it	eq
 8006852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006864:	f380 8811 	msr	BASEPRI, r0
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f7fe ffb0 	bl	80057d4 <vTaskSwitchContext>
 8006874:	f04f 0000 	mov.w	r0, #0
 8006878:	f380 8811 	msr	BASEPRI, r0
 800687c:	bc09      	pop	{r0, r3}
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	6808      	ldr	r0, [r1, #0]
 8006882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006886:	f01e 0f10 	tst.w	lr, #16
 800688a:	bf08      	it	eq
 800688c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006890:	f380 8809 	msr	PSP, r0
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	f3af 8000 	nop.w

080068a0 <pxCurrentTCBConst>:
 80068a0:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
}
 80068c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068c2:	f7fe fecd 	bl	8005660 <xTaskIncrementTick>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068cc:	4b06      	ldr	r3, [pc, #24]	@ (80068e8 <xPortSysTickHandler+0x40>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	2300      	movs	r3, #0
 80068d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f383 8811 	msr	BASEPRI, r3
}
 80068de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <vPortSetupTimerInterrupt+0x34>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <vPortSetupTimerInterrupt+0x38>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <vPortSetupTimerInterrupt+0x3c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a0a      	ldr	r2, [pc, #40]	@ (800692c <vPortSetupTimerInterrupt+0x40>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	099b      	lsrs	r3, r3, #6
 8006908:	4a09      	ldr	r2, [pc, #36]	@ (8006930 <vPortSetupTimerInterrupt+0x44>)
 800690a:	3b01      	subs	r3, #1
 800690c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800690e:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <vPortSetupTimerInterrupt+0x34>)
 8006910:	2207      	movs	r2, #7
 8006912:	601a      	str	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	e000e010 	.word	0xe000e010
 8006924:	e000e018 	.word	0xe000e018
 8006928:	20000000 	.word	0x20000000
 800692c:	10624dd3 	.word	0x10624dd3
 8006930:	e000e014 	.word	0xe000e014

08006934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006934:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006944 <vPortEnableVFP+0x10>
 8006938:	6801      	ldr	r1, [r0, #0]
 800693a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800693e:	6001      	str	r1, [r0, #0]
 8006940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006942:	bf00      	nop
 8006944:	e000ed88 	.word	0xe000ed88

08006948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800694e:	f3ef 8305 	mrs	r3, IPSR
 8006952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b0f      	cmp	r3, #15
 8006958:	d915      	bls.n	8006986 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800695a:	4a18      	ldr	r2, [pc, #96]	@ (80069bc <vPortValidateInterruptPriority+0x74>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006964:	4b16      	ldr	r3, [pc, #88]	@ (80069c0 <vPortValidateInterruptPriority+0x78>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	7afa      	ldrb	r2, [r7, #11]
 800696a:	429a      	cmp	r2, r3
 800696c:	d20b      	bcs.n	8006986 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	607b      	str	r3, [r7, #4]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006986:	4b0f      	ldr	r3, [pc, #60]	@ (80069c4 <vPortValidateInterruptPriority+0x7c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800698e:	4b0e      	ldr	r3, [pc, #56]	@ (80069c8 <vPortValidateInterruptPriority+0x80>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d90b      	bls.n	80069ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	603b      	str	r3, [r7, #0]
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	e7fd      	b.n	80069aa <vPortValidateInterruptPriority+0x62>
	}
 80069ae:	bf00      	nop
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	e000e3f0 	.word	0xe000e3f0
 80069c0:	20000f00 	.word	0x20000f00
 80069c4:	e000ed0c 	.word	0xe000ed0c
 80069c8:	20000f04 	.word	0x20000f04

080069cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	@ 0x28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069d8:	f7fe fd86 	bl	80054e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006b50 <pvPortMalloc+0x184>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069e4:	f000 f924 	bl	8006c30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006b54 <pvPortMalloc+0x188>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4013      	ands	r3, r2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f040 8095 	bne.w	8006b20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01e      	beq.n	8006a3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80069fc:	2208      	movs	r2, #8
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4413      	add	r3, r2
 8006a02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d015      	beq.n	8006a3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f023 0307 	bic.w	r3, r3, #7
 8006a14:	3308      	adds	r3, #8
 8006a16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <pvPortMalloc+0x6e>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	617b      	str	r3, [r7, #20]
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	e7fd      	b.n	8006a36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d06f      	beq.n	8006b20 <pvPortMalloc+0x154>
 8006a40:	4b45      	ldr	r3, [pc, #276]	@ (8006b58 <pvPortMalloc+0x18c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d86a      	bhi.n	8006b20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a4a:	4b44      	ldr	r3, [pc, #272]	@ (8006b5c <pvPortMalloc+0x190>)
 8006a4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a4e:	4b43      	ldr	r3, [pc, #268]	@ (8006b5c <pvPortMalloc+0x190>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a54:	e004      	b.n	8006a60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d903      	bls.n	8006a72 <pvPortMalloc+0xa6>
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f1      	bne.n	8006a56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a72:	4b37      	ldr	r3, [pc, #220]	@ (8006b50 <pvPortMalloc+0x184>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d051      	beq.n	8006b20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2208      	movs	r2, #8
 8006a82:	4413      	add	r3, r2
 8006a84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	1ad2      	subs	r2, r2, r3
 8006a96:	2308      	movs	r3, #8
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d920      	bls.n	8006ae0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <pvPortMalloc+0xfc>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	613b      	str	r3, [r7, #16]
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	e7fd      	b.n	8006ac4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ada:	69b8      	ldr	r0, [r7, #24]
 8006adc:	f000 f90a 	bl	8006cf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b58 <pvPortMalloc+0x18c>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	4a1b      	ldr	r2, [pc, #108]	@ (8006b58 <pvPortMalloc+0x18c>)
 8006aec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aee:	4b1a      	ldr	r3, [pc, #104]	@ (8006b58 <pvPortMalloc+0x18c>)
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b60 <pvPortMalloc+0x194>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d203      	bcs.n	8006b02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006afa:	4b17      	ldr	r3, [pc, #92]	@ (8006b58 <pvPortMalloc+0x18c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a18      	ldr	r2, [pc, #96]	@ (8006b60 <pvPortMalloc+0x194>)
 8006b00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	4b13      	ldr	r3, [pc, #76]	@ (8006b54 <pvPortMalloc+0x188>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b16:	4b13      	ldr	r3, [pc, #76]	@ (8006b64 <pvPortMalloc+0x198>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	4a11      	ldr	r2, [pc, #68]	@ (8006b64 <pvPortMalloc+0x198>)
 8006b1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b20:	f7fe fcf0 	bl	8005504 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00b      	beq.n	8006b46 <pvPortMalloc+0x17a>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	60fb      	str	r3, [r7, #12]
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	e7fd      	b.n	8006b42 <pvPortMalloc+0x176>
	return pvReturn;
 8006b46:	69fb      	ldr	r3, [r7, #28]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3728      	adds	r7, #40	@ 0x28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20001b10 	.word	0x20001b10
 8006b54:	20001b24 	.word	0x20001b24
 8006b58:	20001b14 	.word	0x20001b14
 8006b5c:	20001b08 	.word	0x20001b08
 8006b60:	20001b18 	.word	0x20001b18
 8006b64:	20001b1c 	.word	0x20001b1c

08006b68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d04f      	beq.n	8006c1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b7a:	2308      	movs	r3, #8
 8006b7c:	425b      	negs	r3, r3
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4413      	add	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	4b25      	ldr	r3, [pc, #148]	@ (8006c24 <vPortFree+0xbc>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <vPortFree+0x46>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	60fb      	str	r3, [r7, #12]
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	e7fd      	b.n	8006baa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00b      	beq.n	8006bce <vPortFree+0x66>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60bb      	str	r3, [r7, #8]
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	e7fd      	b.n	8006bca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	4b14      	ldr	r3, [pc, #80]	@ (8006c24 <vPortFree+0xbc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01e      	beq.n	8006c1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11a      	bne.n	8006c1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c24 <vPortFree+0xbc>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	43db      	mvns	r3, r3
 8006bee:	401a      	ands	r2, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bf4:	f7fe fc78 	bl	80054e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006c28 <vPortFree+0xc0>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4413      	add	r3, r2
 8006c02:	4a09      	ldr	r2, [pc, #36]	@ (8006c28 <vPortFree+0xc0>)
 8006c04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c06:	6938      	ldr	r0, [r7, #16]
 8006c08:	f000 f874 	bl	8006cf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c0c:	4b07      	ldr	r3, [pc, #28]	@ (8006c2c <vPortFree+0xc4>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	4a06      	ldr	r2, [pc, #24]	@ (8006c2c <vPortFree+0xc4>)
 8006c14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c16:	f7fe fc75 	bl	8005504 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c1a:	bf00      	nop
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20001b24 	.word	0x20001b24
 8006c28:	20001b14 	.word	0x20001b14
 8006c2c:	20001b20 	.word	0x20001b20

08006c30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c36:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006c3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c3c:	4b27      	ldr	r3, [pc, #156]	@ (8006cdc <prvHeapInit+0xac>)
 8006c3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00c      	beq.n	8006c64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3307      	adds	r3, #7
 8006c4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0307 	bic.w	r3, r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cdc <prvHeapInit+0xac>)
 8006c60:	4413      	add	r3, r2
 8006c62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce0 <prvHeapInit+0xb0>)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ce0 <prvHeapInit+0xb0>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	4413      	add	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0307 	bic.w	r3, r3, #7
 8006c8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a15      	ldr	r2, [pc, #84]	@ (8006ce4 <prvHeapInit+0xb4>)
 8006c90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c92:	4b14      	ldr	r3, [pc, #80]	@ (8006ce4 <prvHeapInit+0xb4>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2200      	movs	r2, #0
 8006c98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c9a:	4b12      	ldr	r3, [pc, #72]	@ (8006ce4 <prvHeapInit+0xb4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	1ad2      	subs	r2, r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce4 <prvHeapInit+0xb4>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce8 <prvHeapInit+0xb8>)
 8006cbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	4a09      	ldr	r2, [pc, #36]	@ (8006cec <prvHeapInit+0xbc>)
 8006cc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cc8:	4b09      	ldr	r3, [pc, #36]	@ (8006cf0 <prvHeapInit+0xc0>)
 8006cca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006cce:	601a      	str	r2, [r3, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000f08 	.word	0x20000f08
 8006ce0:	20001b08 	.word	0x20001b08
 8006ce4:	20001b10 	.word	0x20001b10
 8006ce8:	20001b18 	.word	0x20001b18
 8006cec:	20001b14 	.word	0x20001b14
 8006cf0:	20001b24 	.word	0x20001b24

08006cf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cfc:	4b28      	ldr	r3, [pc, #160]	@ (8006da0 <prvInsertBlockIntoFreeList+0xac>)
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e002      	b.n	8006d08 <prvInsertBlockIntoFreeList+0x14>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d8f7      	bhi.n	8006d02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d108      	bne.n	8006d36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	441a      	add	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	441a      	add	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d118      	bne.n	8006d7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	4b15      	ldr	r3, [pc, #84]	@ (8006da4 <prvInsertBlockIntoFreeList+0xb0>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d00d      	beq.n	8006d72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	441a      	add	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e008      	b.n	8006d84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d72:	4b0c      	ldr	r3, [pc, #48]	@ (8006da4 <prvInsertBlockIntoFreeList+0xb0>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e003      	b.n	8006d84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d002      	beq.n	8006d92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d92:	bf00      	nop
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	20001b08 	.word	0x20001b08
 8006da4:	20001b10 	.word	0x20001b10

08006da8 <std>:
 8006da8:	2300      	movs	r3, #0
 8006daa:	b510      	push	{r4, lr}
 8006dac:	4604      	mov	r4, r0
 8006dae:	e9c0 3300 	strd	r3, r3, [r0]
 8006db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006db6:	6083      	str	r3, [r0, #8]
 8006db8:	8181      	strh	r1, [r0, #12]
 8006dba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dbc:	81c2      	strh	r2, [r0, #14]
 8006dbe:	6183      	str	r3, [r0, #24]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	305c      	adds	r0, #92	@ 0x5c
 8006dc6:	f000 f9e7 	bl	8007198 <memset>
 8006dca:	4b0d      	ldr	r3, [pc, #52]	@ (8006e00 <std+0x58>)
 8006dcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dce:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <std+0x5c>)
 8006dd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e08 <std+0x60>)
 8006dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e0c <std+0x64>)
 8006dd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <std+0x68>)
 8006ddc:	6224      	str	r4, [r4, #32]
 8006dde:	429c      	cmp	r4, r3
 8006de0:	d006      	beq.n	8006df0 <std+0x48>
 8006de2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006de6:	4294      	cmp	r4, r2
 8006de8:	d002      	beq.n	8006df0 <std+0x48>
 8006dea:	33d0      	adds	r3, #208	@ 0xd0
 8006dec:	429c      	cmp	r4, r3
 8006dee:	d105      	bne.n	8006dfc <std+0x54>
 8006df0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df8:	f000 ba46 	b.w	8007288 <__retarget_lock_init_recursive>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	bf00      	nop
 8006e00:	08006fe9 	.word	0x08006fe9
 8006e04:	0800700b 	.word	0x0800700b
 8006e08:	08007043 	.word	0x08007043
 8006e0c:	08007067 	.word	0x08007067
 8006e10:	20001b28 	.word	0x20001b28

08006e14 <stdio_exit_handler>:
 8006e14:	4a02      	ldr	r2, [pc, #8]	@ (8006e20 <stdio_exit_handler+0xc>)
 8006e16:	4903      	ldr	r1, [pc, #12]	@ (8006e24 <stdio_exit_handler+0x10>)
 8006e18:	4803      	ldr	r0, [pc, #12]	@ (8006e28 <stdio_exit_handler+0x14>)
 8006e1a:	f000 b869 	b.w	8006ef0 <_fwalk_sglue>
 8006e1e:	bf00      	nop
 8006e20:	20000010 	.word	0x20000010
 8006e24:	080075a5 	.word	0x080075a5
 8006e28:	20000020 	.word	0x20000020

08006e2c <cleanup_stdio>:
 8006e2c:	6841      	ldr	r1, [r0, #4]
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <cleanup_stdio+0x34>)
 8006e30:	4299      	cmp	r1, r3
 8006e32:	b510      	push	{r4, lr}
 8006e34:	4604      	mov	r4, r0
 8006e36:	d001      	beq.n	8006e3c <cleanup_stdio+0x10>
 8006e38:	f000 fbb4 	bl	80075a4 <_fflush_r>
 8006e3c:	68a1      	ldr	r1, [r4, #8]
 8006e3e:	4b09      	ldr	r3, [pc, #36]	@ (8006e64 <cleanup_stdio+0x38>)
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d002      	beq.n	8006e4a <cleanup_stdio+0x1e>
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fbad 	bl	80075a4 <_fflush_r>
 8006e4a:	68e1      	ldr	r1, [r4, #12]
 8006e4c:	4b06      	ldr	r3, [pc, #24]	@ (8006e68 <cleanup_stdio+0x3c>)
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	d004      	beq.n	8006e5c <cleanup_stdio+0x30>
 8006e52:	4620      	mov	r0, r4
 8006e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e58:	f000 bba4 	b.w	80075a4 <_fflush_r>
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	bf00      	nop
 8006e60:	20001b28 	.word	0x20001b28
 8006e64:	20001b90 	.word	0x20001b90
 8006e68:	20001bf8 	.word	0x20001bf8

08006e6c <global_stdio_init.part.0>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <global_stdio_init.part.0+0x30>)
 8006e70:	4c0b      	ldr	r4, [pc, #44]	@ (8006ea0 <global_stdio_init.part.0+0x34>)
 8006e72:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea4 <global_stdio_init.part.0+0x38>)
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	4620      	mov	r0, r4
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2104      	movs	r1, #4
 8006e7c:	f7ff ff94 	bl	8006da8 <std>
 8006e80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e84:	2201      	movs	r2, #1
 8006e86:	2109      	movs	r1, #9
 8006e88:	f7ff ff8e 	bl	8006da8 <std>
 8006e8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e90:	2202      	movs	r2, #2
 8006e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e96:	2112      	movs	r1, #18
 8006e98:	f7ff bf86 	b.w	8006da8 <std>
 8006e9c:	20001c60 	.word	0x20001c60
 8006ea0:	20001b28 	.word	0x20001b28
 8006ea4:	08006e15 	.word	0x08006e15

08006ea8 <__sfp_lock_acquire>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	@ (8006eb0 <__sfp_lock_acquire+0x8>)
 8006eaa:	f000 b9ee 	b.w	800728a <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	20001c69 	.word	0x20001c69

08006eb4 <__sfp_lock_release>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	@ (8006ebc <__sfp_lock_release+0x8>)
 8006eb6:	f000 b9e9 	b.w	800728c <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	20001c69 	.word	0x20001c69

08006ec0 <__sinit>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	f7ff fff0 	bl	8006ea8 <__sfp_lock_acquire>
 8006ec8:	6a23      	ldr	r3, [r4, #32]
 8006eca:	b11b      	cbz	r3, 8006ed4 <__sinit+0x14>
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f7ff bff0 	b.w	8006eb4 <__sfp_lock_release>
 8006ed4:	4b04      	ldr	r3, [pc, #16]	@ (8006ee8 <__sinit+0x28>)
 8006ed6:	6223      	str	r3, [r4, #32]
 8006ed8:	4b04      	ldr	r3, [pc, #16]	@ (8006eec <__sinit+0x2c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f5      	bne.n	8006ecc <__sinit+0xc>
 8006ee0:	f7ff ffc4 	bl	8006e6c <global_stdio_init.part.0>
 8006ee4:	e7f2      	b.n	8006ecc <__sinit+0xc>
 8006ee6:	bf00      	nop
 8006ee8:	08006e2d 	.word	0x08006e2d
 8006eec:	20001c60 	.word	0x20001c60

08006ef0 <_fwalk_sglue>:
 8006ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	4688      	mov	r8, r1
 8006ef8:	4614      	mov	r4, r2
 8006efa:	2600      	movs	r6, #0
 8006efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f00:	f1b9 0901 	subs.w	r9, r9, #1
 8006f04:	d505      	bpl.n	8006f12 <_fwalk_sglue+0x22>
 8006f06:	6824      	ldr	r4, [r4, #0]
 8006f08:	2c00      	cmp	r4, #0
 8006f0a:	d1f7      	bne.n	8006efc <_fwalk_sglue+0xc>
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f12:	89ab      	ldrh	r3, [r5, #12]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d907      	bls.n	8006f28 <_fwalk_sglue+0x38>
 8006f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	d003      	beq.n	8006f28 <_fwalk_sglue+0x38>
 8006f20:	4629      	mov	r1, r5
 8006f22:	4638      	mov	r0, r7
 8006f24:	47c0      	blx	r8
 8006f26:	4306      	orrs	r6, r0
 8006f28:	3568      	adds	r5, #104	@ 0x68
 8006f2a:	e7e9      	b.n	8006f00 <_fwalk_sglue+0x10>

08006f2c <_puts_r>:
 8006f2c:	6a03      	ldr	r3, [r0, #32]
 8006f2e:	b570      	push	{r4, r5, r6, lr}
 8006f30:	6884      	ldr	r4, [r0, #8]
 8006f32:	4605      	mov	r5, r0
 8006f34:	460e      	mov	r6, r1
 8006f36:	b90b      	cbnz	r3, 8006f3c <_puts_r+0x10>
 8006f38:	f7ff ffc2 	bl	8006ec0 <__sinit>
 8006f3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f3e:	07db      	lsls	r3, r3, #31
 8006f40:	d405      	bmi.n	8006f4e <_puts_r+0x22>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	0598      	lsls	r0, r3, #22
 8006f46:	d402      	bmi.n	8006f4e <_puts_r+0x22>
 8006f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f4a:	f000 f99e 	bl	800728a <__retarget_lock_acquire_recursive>
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	0719      	lsls	r1, r3, #28
 8006f52:	d502      	bpl.n	8006f5a <_puts_r+0x2e>
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d135      	bne.n	8006fc6 <_puts_r+0x9a>
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f000 f8c5 	bl	80070ec <__swsetup_r>
 8006f62:	b380      	cbz	r0, 8006fc6 <_puts_r+0x9a>
 8006f64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006f68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f6a:	07da      	lsls	r2, r3, #31
 8006f6c:	d405      	bmi.n	8006f7a <_puts_r+0x4e>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	059b      	lsls	r3, r3, #22
 8006f72:	d402      	bmi.n	8006f7a <_puts_r+0x4e>
 8006f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f76:	f000 f989 	bl	800728c <__retarget_lock_release_recursive>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	da04      	bge.n	8006f8c <_puts_r+0x60>
 8006f82:	69a2      	ldr	r2, [r4, #24]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	dc17      	bgt.n	8006fb8 <_puts_r+0x8c>
 8006f88:	290a      	cmp	r1, #10
 8006f8a:	d015      	beq.n	8006fb8 <_puts_r+0x8c>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	6022      	str	r2, [r4, #0]
 8006f92:	7019      	strb	r1, [r3, #0]
 8006f94:	68a3      	ldr	r3, [r4, #8]
 8006f96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	60a3      	str	r3, [r4, #8]
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	d1ed      	bne.n	8006f7e <_puts_r+0x52>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	da11      	bge.n	8006fca <_puts_r+0x9e>
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	210a      	movs	r1, #10
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 f85f 	bl	800706e <__swbuf_r>
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d0d7      	beq.n	8006f64 <_puts_r+0x38>
 8006fb4:	250a      	movs	r5, #10
 8006fb6:	e7d7      	b.n	8006f68 <_puts_r+0x3c>
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 f857 	bl	800706e <__swbuf_r>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d1e7      	bne.n	8006f94 <_puts_r+0x68>
 8006fc4:	e7ce      	b.n	8006f64 <_puts_r+0x38>
 8006fc6:	3e01      	subs	r6, #1
 8006fc8:	e7e4      	b.n	8006f94 <_puts_r+0x68>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	6022      	str	r2, [r4, #0]
 8006fd0:	220a      	movs	r2, #10
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	e7ee      	b.n	8006fb4 <_puts_r+0x88>
	...

08006fd8 <puts>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	@ (8006fe4 <puts+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f7ff bfa5 	b.w	8006f2c <_puts_r>
 8006fe2:	bf00      	nop
 8006fe4:	2000001c 	.word	0x2000001c

08006fe8 <__sread>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	460c      	mov	r4, r1
 8006fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff0:	f000 f8fc 	bl	80071ec <_read_r>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	bfab      	itete	ge
 8006ff8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8006ffc:	181b      	addge	r3, r3, r0
 8006ffe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007002:	bfac      	ite	ge
 8007004:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007006:	81a3      	strhlt	r3, [r4, #12]
 8007008:	bd10      	pop	{r4, pc}

0800700a <__swrite>:
 800700a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700e:	461f      	mov	r7, r3
 8007010:	898b      	ldrh	r3, [r1, #12]
 8007012:	05db      	lsls	r3, r3, #23
 8007014:	4605      	mov	r5, r0
 8007016:	460c      	mov	r4, r1
 8007018:	4616      	mov	r6, r2
 800701a:	d505      	bpl.n	8007028 <__swrite+0x1e>
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	2302      	movs	r3, #2
 8007022:	2200      	movs	r2, #0
 8007024:	f000 f8d0 	bl	80071c8 <_lseek_r>
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800702e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007032:	81a3      	strh	r3, [r4, #12]
 8007034:	4632      	mov	r2, r6
 8007036:	463b      	mov	r3, r7
 8007038:	4628      	mov	r0, r5
 800703a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	f000 b8e7 	b.w	8007210 <_write_r>

08007042 <__sseek>:
 8007042:	b510      	push	{r4, lr}
 8007044:	460c      	mov	r4, r1
 8007046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704a:	f000 f8bd 	bl	80071c8 <_lseek_r>
 800704e:	1c43      	adds	r3, r0, #1
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	bf15      	itete	ne
 8007054:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007056:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800705a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800705e:	81a3      	strheq	r3, [r4, #12]
 8007060:	bf18      	it	ne
 8007062:	81a3      	strhne	r3, [r4, #12]
 8007064:	bd10      	pop	{r4, pc}

08007066 <__sclose>:
 8007066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706a:	f000 b89d 	b.w	80071a8 <_close_r>

0800706e <__swbuf_r>:
 800706e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007070:	460e      	mov	r6, r1
 8007072:	4614      	mov	r4, r2
 8007074:	4605      	mov	r5, r0
 8007076:	b118      	cbz	r0, 8007080 <__swbuf_r+0x12>
 8007078:	6a03      	ldr	r3, [r0, #32]
 800707a:	b90b      	cbnz	r3, 8007080 <__swbuf_r+0x12>
 800707c:	f7ff ff20 	bl	8006ec0 <__sinit>
 8007080:	69a3      	ldr	r3, [r4, #24]
 8007082:	60a3      	str	r3, [r4, #8]
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	071a      	lsls	r2, r3, #28
 8007088:	d501      	bpl.n	800708e <__swbuf_r+0x20>
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	b943      	cbnz	r3, 80070a0 <__swbuf_r+0x32>
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f000 f82b 	bl	80070ec <__swsetup_r>
 8007096:	b118      	cbz	r0, 80070a0 <__swbuf_r+0x32>
 8007098:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800709c:	4638      	mov	r0, r7
 800709e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	6922      	ldr	r2, [r4, #16]
 80070a4:	1a98      	subs	r0, r3, r2
 80070a6:	6963      	ldr	r3, [r4, #20]
 80070a8:	b2f6      	uxtb	r6, r6
 80070aa:	4283      	cmp	r3, r0
 80070ac:	4637      	mov	r7, r6
 80070ae:	dc05      	bgt.n	80070bc <__swbuf_r+0x4e>
 80070b0:	4621      	mov	r1, r4
 80070b2:	4628      	mov	r0, r5
 80070b4:	f000 fa76 	bl	80075a4 <_fflush_r>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d1ed      	bne.n	8007098 <__swbuf_r+0x2a>
 80070bc:	68a3      	ldr	r3, [r4, #8]
 80070be:	3b01      	subs	r3, #1
 80070c0:	60a3      	str	r3, [r4, #8]
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	6022      	str	r2, [r4, #0]
 80070c8:	701e      	strb	r6, [r3, #0]
 80070ca:	6962      	ldr	r2, [r4, #20]
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d004      	beq.n	80070dc <__swbuf_r+0x6e>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	07db      	lsls	r3, r3, #31
 80070d6:	d5e1      	bpl.n	800709c <__swbuf_r+0x2e>
 80070d8:	2e0a      	cmp	r6, #10
 80070da:	d1df      	bne.n	800709c <__swbuf_r+0x2e>
 80070dc:	4621      	mov	r1, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fa60 	bl	80075a4 <_fflush_r>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d0d9      	beq.n	800709c <__swbuf_r+0x2e>
 80070e8:	e7d6      	b.n	8007098 <__swbuf_r+0x2a>
	...

080070ec <__swsetup_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4b29      	ldr	r3, [pc, #164]	@ (8007194 <__swsetup_r+0xa8>)
 80070f0:	4605      	mov	r5, r0
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	460c      	mov	r4, r1
 80070f6:	b118      	cbz	r0, 8007100 <__swsetup_r+0x14>
 80070f8:	6a03      	ldr	r3, [r0, #32]
 80070fa:	b90b      	cbnz	r3, 8007100 <__swsetup_r+0x14>
 80070fc:	f7ff fee0 	bl	8006ec0 <__sinit>
 8007100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007104:	0719      	lsls	r1, r3, #28
 8007106:	d422      	bmi.n	800714e <__swsetup_r+0x62>
 8007108:	06da      	lsls	r2, r3, #27
 800710a:	d407      	bmi.n	800711c <__swsetup_r+0x30>
 800710c:	2209      	movs	r2, #9
 800710e:	602a      	str	r2, [r5, #0]
 8007110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800711a:	e033      	b.n	8007184 <__swsetup_r+0x98>
 800711c:	0758      	lsls	r0, r3, #29
 800711e:	d512      	bpl.n	8007146 <__swsetup_r+0x5a>
 8007120:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007122:	b141      	cbz	r1, 8007136 <__swsetup_r+0x4a>
 8007124:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007128:	4299      	cmp	r1, r3
 800712a:	d002      	beq.n	8007132 <__swsetup_r+0x46>
 800712c:	4628      	mov	r0, r5
 800712e:	f000 f8bd 	bl	80072ac <_free_r>
 8007132:	2300      	movs	r3, #0
 8007134:	6363      	str	r3, [r4, #52]	@ 0x34
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	2300      	movs	r3, #0
 8007140:	6063      	str	r3, [r4, #4]
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f043 0308 	orr.w	r3, r3, #8
 800714c:	81a3      	strh	r3, [r4, #12]
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	b94b      	cbnz	r3, 8007166 <__swsetup_r+0x7a>
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800715c:	d003      	beq.n	8007166 <__swsetup_r+0x7a>
 800715e:	4621      	mov	r1, r4
 8007160:	4628      	mov	r0, r5
 8007162:	f000 fa6d 	bl	8007640 <__smakebuf_r>
 8007166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716a:	f013 0201 	ands.w	r2, r3, #1
 800716e:	d00a      	beq.n	8007186 <__swsetup_r+0x9a>
 8007170:	2200      	movs	r2, #0
 8007172:	60a2      	str	r2, [r4, #8]
 8007174:	6962      	ldr	r2, [r4, #20]
 8007176:	4252      	negs	r2, r2
 8007178:	61a2      	str	r2, [r4, #24]
 800717a:	6922      	ldr	r2, [r4, #16]
 800717c:	b942      	cbnz	r2, 8007190 <__swsetup_r+0xa4>
 800717e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007182:	d1c5      	bne.n	8007110 <__swsetup_r+0x24>
 8007184:	bd38      	pop	{r3, r4, r5, pc}
 8007186:	0799      	lsls	r1, r3, #30
 8007188:	bf58      	it	pl
 800718a:	6962      	ldrpl	r2, [r4, #20]
 800718c:	60a2      	str	r2, [r4, #8]
 800718e:	e7f4      	b.n	800717a <__swsetup_r+0x8e>
 8007190:	2000      	movs	r0, #0
 8007192:	e7f7      	b.n	8007184 <__swsetup_r+0x98>
 8007194:	2000001c 	.word	0x2000001c

08007198 <memset>:
 8007198:	4402      	add	r2, r0
 800719a:	4603      	mov	r3, r0
 800719c:	4293      	cmp	r3, r2
 800719e:	d100      	bne.n	80071a2 <memset+0xa>
 80071a0:	4770      	bx	lr
 80071a2:	f803 1b01 	strb.w	r1, [r3], #1
 80071a6:	e7f9      	b.n	800719c <memset+0x4>

080071a8 <_close_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4d06      	ldr	r5, [pc, #24]	@ (80071c4 <_close_r+0x1c>)
 80071ac:	2300      	movs	r3, #0
 80071ae:	4604      	mov	r4, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	602b      	str	r3, [r5, #0]
 80071b4:	f7f9 fd5d 	bl	8000c72 <_close>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_close_r+0x1a>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_close_r+0x1a>
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	20001c64 	.word	0x20001c64

080071c8 <_lseek_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d07      	ldr	r5, [pc, #28]	@ (80071e8 <_lseek_r+0x20>)
 80071cc:	4604      	mov	r4, r0
 80071ce:	4608      	mov	r0, r1
 80071d0:	4611      	mov	r1, r2
 80071d2:	2200      	movs	r2, #0
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f7f9 fd72 	bl	8000cc0 <_lseek>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_lseek_r+0x1e>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_lseek_r+0x1e>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	20001c64 	.word	0x20001c64

080071ec <_read_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d07      	ldr	r5, [pc, #28]	@ (800720c <_read_r+0x20>)
 80071f0:	4604      	mov	r4, r0
 80071f2:	4608      	mov	r0, r1
 80071f4:	4611      	mov	r1, r2
 80071f6:	2200      	movs	r2, #0
 80071f8:	602a      	str	r2, [r5, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f7f9 fd1c 	bl	8000c38 <_read>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_read_r+0x1e>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_read_r+0x1e>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	20001c64 	.word	0x20001c64

08007210 <_write_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d07      	ldr	r5, [pc, #28]	@ (8007230 <_write_r+0x20>)
 8007214:	4604      	mov	r4, r0
 8007216:	4608      	mov	r0, r1
 8007218:	4611      	mov	r1, r2
 800721a:	2200      	movs	r2, #0
 800721c:	602a      	str	r2, [r5, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f7f9 f976 	bl	8000510 <_write>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_write_r+0x1e>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_write_r+0x1e>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20001c64 	.word	0x20001c64

08007234 <__errno>:
 8007234:	4b01      	ldr	r3, [pc, #4]	@ (800723c <__errno+0x8>)
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	2000001c 	.word	0x2000001c

08007240 <__libc_init_array>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	4d0d      	ldr	r5, [pc, #52]	@ (8007278 <__libc_init_array+0x38>)
 8007244:	4c0d      	ldr	r4, [pc, #52]	@ (800727c <__libc_init_array+0x3c>)
 8007246:	1b64      	subs	r4, r4, r5
 8007248:	10a4      	asrs	r4, r4, #2
 800724a:	2600      	movs	r6, #0
 800724c:	42a6      	cmp	r6, r4
 800724e:	d109      	bne.n	8007264 <__libc_init_array+0x24>
 8007250:	4d0b      	ldr	r5, [pc, #44]	@ (8007280 <__libc_init_array+0x40>)
 8007252:	4c0c      	ldr	r4, [pc, #48]	@ (8007284 <__libc_init_array+0x44>)
 8007254:	f000 fa62 	bl	800771c <_init>
 8007258:	1b64      	subs	r4, r4, r5
 800725a:	10a4      	asrs	r4, r4, #2
 800725c:	2600      	movs	r6, #0
 800725e:	42a6      	cmp	r6, r4
 8007260:	d105      	bne.n	800726e <__libc_init_array+0x2e>
 8007262:	bd70      	pop	{r4, r5, r6, pc}
 8007264:	f855 3b04 	ldr.w	r3, [r5], #4
 8007268:	4798      	blx	r3
 800726a:	3601      	adds	r6, #1
 800726c:	e7ee      	b.n	800724c <__libc_init_array+0xc>
 800726e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007272:	4798      	blx	r3
 8007274:	3601      	adds	r6, #1
 8007276:	e7f2      	b.n	800725e <__libc_init_array+0x1e>
 8007278:	08007800 	.word	0x08007800
 800727c:	08007800 	.word	0x08007800
 8007280:	08007800 	.word	0x08007800
 8007284:	08007804 	.word	0x08007804

08007288 <__retarget_lock_init_recursive>:
 8007288:	4770      	bx	lr

0800728a <__retarget_lock_acquire_recursive>:
 800728a:	4770      	bx	lr

0800728c <__retarget_lock_release_recursive>:
 800728c:	4770      	bx	lr

0800728e <memcpy>:
 800728e:	440a      	add	r2, r1
 8007290:	4291      	cmp	r1, r2
 8007292:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007296:	d100      	bne.n	800729a <memcpy+0xc>
 8007298:	4770      	bx	lr
 800729a:	b510      	push	{r4, lr}
 800729c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072a4:	4291      	cmp	r1, r2
 80072a6:	d1f9      	bne.n	800729c <memcpy+0xe>
 80072a8:	bd10      	pop	{r4, pc}
	...

080072ac <_free_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4605      	mov	r5, r0
 80072b0:	2900      	cmp	r1, #0
 80072b2:	d041      	beq.n	8007338 <_free_r+0x8c>
 80072b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072b8:	1f0c      	subs	r4, r1, #4
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bfb8      	it	lt
 80072be:	18e4      	addlt	r4, r4, r3
 80072c0:	f000 f8e0 	bl	8007484 <__malloc_lock>
 80072c4:	4a1d      	ldr	r2, [pc, #116]	@ (800733c <_free_r+0x90>)
 80072c6:	6813      	ldr	r3, [r2, #0]
 80072c8:	b933      	cbnz	r3, 80072d8 <_free_r+0x2c>
 80072ca:	6063      	str	r3, [r4, #4]
 80072cc:	6014      	str	r4, [r2, #0]
 80072ce:	4628      	mov	r0, r5
 80072d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072d4:	f000 b8dc 	b.w	8007490 <__malloc_unlock>
 80072d8:	42a3      	cmp	r3, r4
 80072da:	d908      	bls.n	80072ee <_free_r+0x42>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	1821      	adds	r1, r4, r0
 80072e0:	428b      	cmp	r3, r1
 80072e2:	bf01      	itttt	eq
 80072e4:	6819      	ldreq	r1, [r3, #0]
 80072e6:	685b      	ldreq	r3, [r3, #4]
 80072e8:	1809      	addeq	r1, r1, r0
 80072ea:	6021      	streq	r1, [r4, #0]
 80072ec:	e7ed      	b.n	80072ca <_free_r+0x1e>
 80072ee:	461a      	mov	r2, r3
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	b10b      	cbz	r3, 80072f8 <_free_r+0x4c>
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d9fa      	bls.n	80072ee <_free_r+0x42>
 80072f8:	6811      	ldr	r1, [r2, #0]
 80072fa:	1850      	adds	r0, r2, r1
 80072fc:	42a0      	cmp	r0, r4
 80072fe:	d10b      	bne.n	8007318 <_free_r+0x6c>
 8007300:	6820      	ldr	r0, [r4, #0]
 8007302:	4401      	add	r1, r0
 8007304:	1850      	adds	r0, r2, r1
 8007306:	4283      	cmp	r3, r0
 8007308:	6011      	str	r1, [r2, #0]
 800730a:	d1e0      	bne.n	80072ce <_free_r+0x22>
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	6053      	str	r3, [r2, #4]
 8007312:	4408      	add	r0, r1
 8007314:	6010      	str	r0, [r2, #0]
 8007316:	e7da      	b.n	80072ce <_free_r+0x22>
 8007318:	d902      	bls.n	8007320 <_free_r+0x74>
 800731a:	230c      	movs	r3, #12
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	e7d6      	b.n	80072ce <_free_r+0x22>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	1821      	adds	r1, r4, r0
 8007324:	428b      	cmp	r3, r1
 8007326:	bf04      	itt	eq
 8007328:	6819      	ldreq	r1, [r3, #0]
 800732a:	685b      	ldreq	r3, [r3, #4]
 800732c:	6063      	str	r3, [r4, #4]
 800732e:	bf04      	itt	eq
 8007330:	1809      	addeq	r1, r1, r0
 8007332:	6021      	streq	r1, [r4, #0]
 8007334:	6054      	str	r4, [r2, #4]
 8007336:	e7ca      	b.n	80072ce <_free_r+0x22>
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	20001c70 	.word	0x20001c70

08007340 <sbrk_aligned>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	4e0f      	ldr	r6, [pc, #60]	@ (8007380 <sbrk_aligned+0x40>)
 8007344:	460c      	mov	r4, r1
 8007346:	6831      	ldr	r1, [r6, #0]
 8007348:	4605      	mov	r5, r0
 800734a:	b911      	cbnz	r1, 8007352 <sbrk_aligned+0x12>
 800734c:	f000 f9d6 	bl	80076fc <_sbrk_r>
 8007350:	6030      	str	r0, [r6, #0]
 8007352:	4621      	mov	r1, r4
 8007354:	4628      	mov	r0, r5
 8007356:	f000 f9d1 	bl	80076fc <_sbrk_r>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	d103      	bne.n	8007366 <sbrk_aligned+0x26>
 800735e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007362:	4620      	mov	r0, r4
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 8007366:	1cc4      	adds	r4, r0, #3
 8007368:	f024 0403 	bic.w	r4, r4, #3
 800736c:	42a0      	cmp	r0, r4
 800736e:	d0f8      	beq.n	8007362 <sbrk_aligned+0x22>
 8007370:	1a21      	subs	r1, r4, r0
 8007372:	4628      	mov	r0, r5
 8007374:	f000 f9c2 	bl	80076fc <_sbrk_r>
 8007378:	3001      	adds	r0, #1
 800737a:	d1f2      	bne.n	8007362 <sbrk_aligned+0x22>
 800737c:	e7ef      	b.n	800735e <sbrk_aligned+0x1e>
 800737e:	bf00      	nop
 8007380:	20001c6c 	.word	0x20001c6c

08007384 <_malloc_r>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	1ccd      	adds	r5, r1, #3
 800738a:	f025 0503 	bic.w	r5, r5, #3
 800738e:	3508      	adds	r5, #8
 8007390:	2d0c      	cmp	r5, #12
 8007392:	bf38      	it	cc
 8007394:	250c      	movcc	r5, #12
 8007396:	2d00      	cmp	r5, #0
 8007398:	4606      	mov	r6, r0
 800739a:	db01      	blt.n	80073a0 <_malloc_r+0x1c>
 800739c:	42a9      	cmp	r1, r5
 800739e:	d904      	bls.n	80073aa <_malloc_r+0x26>
 80073a0:	230c      	movs	r3, #12
 80073a2:	6033      	str	r3, [r6, #0]
 80073a4:	2000      	movs	r0, #0
 80073a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007480 <_malloc_r+0xfc>
 80073ae:	f000 f869 	bl	8007484 <__malloc_lock>
 80073b2:	f8d8 3000 	ldr.w	r3, [r8]
 80073b6:	461c      	mov	r4, r3
 80073b8:	bb44      	cbnz	r4, 800740c <_malloc_r+0x88>
 80073ba:	4629      	mov	r1, r5
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff ffbf 	bl	8007340 <sbrk_aligned>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	4604      	mov	r4, r0
 80073c6:	d158      	bne.n	800747a <_malloc_r+0xf6>
 80073c8:	f8d8 4000 	ldr.w	r4, [r8]
 80073cc:	4627      	mov	r7, r4
 80073ce:	2f00      	cmp	r7, #0
 80073d0:	d143      	bne.n	800745a <_malloc_r+0xd6>
 80073d2:	2c00      	cmp	r4, #0
 80073d4:	d04b      	beq.n	800746e <_malloc_r+0xea>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	4639      	mov	r1, r7
 80073da:	4630      	mov	r0, r6
 80073dc:	eb04 0903 	add.w	r9, r4, r3
 80073e0:	f000 f98c 	bl	80076fc <_sbrk_r>
 80073e4:	4581      	cmp	r9, r0
 80073e6:	d142      	bne.n	800746e <_malloc_r+0xea>
 80073e8:	6821      	ldr	r1, [r4, #0]
 80073ea:	1a6d      	subs	r5, r5, r1
 80073ec:	4629      	mov	r1, r5
 80073ee:	4630      	mov	r0, r6
 80073f0:	f7ff ffa6 	bl	8007340 <sbrk_aligned>
 80073f4:	3001      	adds	r0, #1
 80073f6:	d03a      	beq.n	800746e <_malloc_r+0xea>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	442b      	add	r3, r5
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	bb62      	cbnz	r2, 8007460 <_malloc_r+0xdc>
 8007406:	f8c8 7000 	str.w	r7, [r8]
 800740a:	e00f      	b.n	800742c <_malloc_r+0xa8>
 800740c:	6822      	ldr	r2, [r4, #0]
 800740e:	1b52      	subs	r2, r2, r5
 8007410:	d420      	bmi.n	8007454 <_malloc_r+0xd0>
 8007412:	2a0b      	cmp	r2, #11
 8007414:	d917      	bls.n	8007446 <_malloc_r+0xc2>
 8007416:	1961      	adds	r1, r4, r5
 8007418:	42a3      	cmp	r3, r4
 800741a:	6025      	str	r5, [r4, #0]
 800741c:	bf18      	it	ne
 800741e:	6059      	strne	r1, [r3, #4]
 8007420:	6863      	ldr	r3, [r4, #4]
 8007422:	bf08      	it	eq
 8007424:	f8c8 1000 	streq.w	r1, [r8]
 8007428:	5162      	str	r2, [r4, r5]
 800742a:	604b      	str	r3, [r1, #4]
 800742c:	4630      	mov	r0, r6
 800742e:	f000 f82f 	bl	8007490 <__malloc_unlock>
 8007432:	f104 000b 	add.w	r0, r4, #11
 8007436:	1d23      	adds	r3, r4, #4
 8007438:	f020 0007 	bic.w	r0, r0, #7
 800743c:	1ac2      	subs	r2, r0, r3
 800743e:	bf1c      	itt	ne
 8007440:	1a1b      	subne	r3, r3, r0
 8007442:	50a3      	strne	r3, [r4, r2]
 8007444:	e7af      	b.n	80073a6 <_malloc_r+0x22>
 8007446:	6862      	ldr	r2, [r4, #4]
 8007448:	42a3      	cmp	r3, r4
 800744a:	bf0c      	ite	eq
 800744c:	f8c8 2000 	streq.w	r2, [r8]
 8007450:	605a      	strne	r2, [r3, #4]
 8007452:	e7eb      	b.n	800742c <_malloc_r+0xa8>
 8007454:	4623      	mov	r3, r4
 8007456:	6864      	ldr	r4, [r4, #4]
 8007458:	e7ae      	b.n	80073b8 <_malloc_r+0x34>
 800745a:	463c      	mov	r4, r7
 800745c:	687f      	ldr	r7, [r7, #4]
 800745e:	e7b6      	b.n	80073ce <_malloc_r+0x4a>
 8007460:	461a      	mov	r2, r3
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	42a3      	cmp	r3, r4
 8007466:	d1fb      	bne.n	8007460 <_malloc_r+0xdc>
 8007468:	2300      	movs	r3, #0
 800746a:	6053      	str	r3, [r2, #4]
 800746c:	e7de      	b.n	800742c <_malloc_r+0xa8>
 800746e:	230c      	movs	r3, #12
 8007470:	6033      	str	r3, [r6, #0]
 8007472:	4630      	mov	r0, r6
 8007474:	f000 f80c 	bl	8007490 <__malloc_unlock>
 8007478:	e794      	b.n	80073a4 <_malloc_r+0x20>
 800747a:	6005      	str	r5, [r0, #0]
 800747c:	e7d6      	b.n	800742c <_malloc_r+0xa8>
 800747e:	bf00      	nop
 8007480:	20001c70 	.word	0x20001c70

08007484 <__malloc_lock>:
 8007484:	4801      	ldr	r0, [pc, #4]	@ (800748c <__malloc_lock+0x8>)
 8007486:	f7ff bf00 	b.w	800728a <__retarget_lock_acquire_recursive>
 800748a:	bf00      	nop
 800748c:	20001c68 	.word	0x20001c68

08007490 <__malloc_unlock>:
 8007490:	4801      	ldr	r0, [pc, #4]	@ (8007498 <__malloc_unlock+0x8>)
 8007492:	f7ff befb 	b.w	800728c <__retarget_lock_release_recursive>
 8007496:	bf00      	nop
 8007498:	20001c68 	.word	0x20001c68

0800749c <__sflush_r>:
 800749c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a4:	0716      	lsls	r6, r2, #28
 80074a6:	4605      	mov	r5, r0
 80074a8:	460c      	mov	r4, r1
 80074aa:	d454      	bmi.n	8007556 <__sflush_r+0xba>
 80074ac:	684b      	ldr	r3, [r1, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dc02      	bgt.n	80074b8 <__sflush_r+0x1c>
 80074b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd48      	ble.n	800754a <__sflush_r+0xae>
 80074b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	d045      	beq.n	800754a <__sflush_r+0xae>
 80074be:	2300      	movs	r3, #0
 80074c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074c4:	682f      	ldr	r7, [r5, #0]
 80074c6:	6a21      	ldr	r1, [r4, #32]
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	d030      	beq.n	800752e <__sflush_r+0x92>
 80074cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	0759      	lsls	r1, r3, #29
 80074d2:	d505      	bpl.n	80074e0 <__sflush_r+0x44>
 80074d4:	6863      	ldr	r3, [r4, #4]
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074da:	b10b      	cbz	r3, 80074e0 <__sflush_r+0x44>
 80074dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	2300      	movs	r3, #0
 80074e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074e4:	6a21      	ldr	r1, [r4, #32]
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b0      	blx	r6
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	d106      	bne.n	80074fe <__sflush_r+0x62>
 80074f0:	6829      	ldr	r1, [r5, #0]
 80074f2:	291d      	cmp	r1, #29
 80074f4:	d82b      	bhi.n	800754e <__sflush_r+0xb2>
 80074f6:	4a2a      	ldr	r2, [pc, #168]	@ (80075a0 <__sflush_r+0x104>)
 80074f8:	410a      	asrs	r2, r1
 80074fa:	07d6      	lsls	r6, r2, #31
 80074fc:	d427      	bmi.n	800754e <__sflush_r+0xb2>
 80074fe:	2200      	movs	r2, #0
 8007500:	6062      	str	r2, [r4, #4]
 8007502:	04d9      	lsls	r1, r3, #19
 8007504:	6922      	ldr	r2, [r4, #16]
 8007506:	6022      	str	r2, [r4, #0]
 8007508:	d504      	bpl.n	8007514 <__sflush_r+0x78>
 800750a:	1c42      	adds	r2, r0, #1
 800750c:	d101      	bne.n	8007512 <__sflush_r+0x76>
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	b903      	cbnz	r3, 8007514 <__sflush_r+0x78>
 8007512:	6560      	str	r0, [r4, #84]	@ 0x54
 8007514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007516:	602f      	str	r7, [r5, #0]
 8007518:	b1b9      	cbz	r1, 800754a <__sflush_r+0xae>
 800751a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800751e:	4299      	cmp	r1, r3
 8007520:	d002      	beq.n	8007528 <__sflush_r+0x8c>
 8007522:	4628      	mov	r0, r5
 8007524:	f7ff fec2 	bl	80072ac <_free_r>
 8007528:	2300      	movs	r3, #0
 800752a:	6363      	str	r3, [r4, #52]	@ 0x34
 800752c:	e00d      	b.n	800754a <__sflush_r+0xae>
 800752e:	2301      	movs	r3, #1
 8007530:	4628      	mov	r0, r5
 8007532:	47b0      	blx	r6
 8007534:	4602      	mov	r2, r0
 8007536:	1c50      	adds	r0, r2, #1
 8007538:	d1c9      	bne.n	80074ce <__sflush_r+0x32>
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0c6      	beq.n	80074ce <__sflush_r+0x32>
 8007540:	2b1d      	cmp	r3, #29
 8007542:	d001      	beq.n	8007548 <__sflush_r+0xac>
 8007544:	2b16      	cmp	r3, #22
 8007546:	d11e      	bne.n	8007586 <__sflush_r+0xea>
 8007548:	602f      	str	r7, [r5, #0]
 800754a:	2000      	movs	r0, #0
 800754c:	e022      	b.n	8007594 <__sflush_r+0xf8>
 800754e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007552:	b21b      	sxth	r3, r3
 8007554:	e01b      	b.n	800758e <__sflush_r+0xf2>
 8007556:	690f      	ldr	r7, [r1, #16]
 8007558:	2f00      	cmp	r7, #0
 800755a:	d0f6      	beq.n	800754a <__sflush_r+0xae>
 800755c:	0793      	lsls	r3, r2, #30
 800755e:	680e      	ldr	r6, [r1, #0]
 8007560:	bf08      	it	eq
 8007562:	694b      	ldreq	r3, [r1, #20]
 8007564:	600f      	str	r7, [r1, #0]
 8007566:	bf18      	it	ne
 8007568:	2300      	movne	r3, #0
 800756a:	eba6 0807 	sub.w	r8, r6, r7
 800756e:	608b      	str	r3, [r1, #8]
 8007570:	f1b8 0f00 	cmp.w	r8, #0
 8007574:	dde9      	ble.n	800754a <__sflush_r+0xae>
 8007576:	6a21      	ldr	r1, [r4, #32]
 8007578:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800757a:	4643      	mov	r3, r8
 800757c:	463a      	mov	r2, r7
 800757e:	4628      	mov	r0, r5
 8007580:	47b0      	blx	r6
 8007582:	2800      	cmp	r0, #0
 8007584:	dc08      	bgt.n	8007598 <__sflush_r+0xfc>
 8007586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007598:	4407      	add	r7, r0
 800759a:	eba8 0800 	sub.w	r8, r8, r0
 800759e:	e7e7      	b.n	8007570 <__sflush_r+0xd4>
 80075a0:	dfbffffe 	.word	0xdfbffffe

080075a4 <_fflush_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	4605      	mov	r5, r0
 80075aa:	460c      	mov	r4, r1
 80075ac:	b913      	cbnz	r3, 80075b4 <_fflush_r+0x10>
 80075ae:	2500      	movs	r5, #0
 80075b0:	4628      	mov	r0, r5
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	b118      	cbz	r0, 80075be <_fflush_r+0x1a>
 80075b6:	6a03      	ldr	r3, [r0, #32]
 80075b8:	b90b      	cbnz	r3, 80075be <_fflush_r+0x1a>
 80075ba:	f7ff fc81 	bl	8006ec0 <__sinit>
 80075be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0f3      	beq.n	80075ae <_fflush_r+0xa>
 80075c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075c8:	07d0      	lsls	r0, r2, #31
 80075ca:	d404      	bmi.n	80075d6 <_fflush_r+0x32>
 80075cc:	0599      	lsls	r1, r3, #22
 80075ce:	d402      	bmi.n	80075d6 <_fflush_r+0x32>
 80075d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075d2:	f7ff fe5a 	bl	800728a <__retarget_lock_acquire_recursive>
 80075d6:	4628      	mov	r0, r5
 80075d8:	4621      	mov	r1, r4
 80075da:	f7ff ff5f 	bl	800749c <__sflush_r>
 80075de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075e0:	07da      	lsls	r2, r3, #31
 80075e2:	4605      	mov	r5, r0
 80075e4:	d4e4      	bmi.n	80075b0 <_fflush_r+0xc>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	059b      	lsls	r3, r3, #22
 80075ea:	d4e1      	bmi.n	80075b0 <_fflush_r+0xc>
 80075ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ee:	f7ff fe4d 	bl	800728c <__retarget_lock_release_recursive>
 80075f2:	e7dd      	b.n	80075b0 <_fflush_r+0xc>

080075f4 <__swhatbuf_r>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	460c      	mov	r4, r1
 80075f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fc:	2900      	cmp	r1, #0
 80075fe:	b096      	sub	sp, #88	@ 0x58
 8007600:	4615      	mov	r5, r2
 8007602:	461e      	mov	r6, r3
 8007604:	da0d      	bge.n	8007622 <__swhatbuf_r+0x2e>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800760c:	f04f 0100 	mov.w	r1, #0
 8007610:	bf14      	ite	ne
 8007612:	2340      	movne	r3, #64	@ 0x40
 8007614:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007618:	2000      	movs	r0, #0
 800761a:	6031      	str	r1, [r6, #0]
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	b016      	add	sp, #88	@ 0x58
 8007620:	bd70      	pop	{r4, r5, r6, pc}
 8007622:	466a      	mov	r2, sp
 8007624:	f000 f848 	bl	80076b8 <_fstat_r>
 8007628:	2800      	cmp	r0, #0
 800762a:	dbec      	blt.n	8007606 <__swhatbuf_r+0x12>
 800762c:	9901      	ldr	r1, [sp, #4]
 800762e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007632:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007636:	4259      	negs	r1, r3
 8007638:	4159      	adcs	r1, r3
 800763a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800763e:	e7eb      	b.n	8007618 <__swhatbuf_r+0x24>

08007640 <__smakebuf_r>:
 8007640:	898b      	ldrh	r3, [r1, #12]
 8007642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007644:	079d      	lsls	r5, r3, #30
 8007646:	4606      	mov	r6, r0
 8007648:	460c      	mov	r4, r1
 800764a:	d507      	bpl.n	800765c <__smakebuf_r+0x1c>
 800764c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	2301      	movs	r3, #1
 8007656:	6163      	str	r3, [r4, #20]
 8007658:	b003      	add	sp, #12
 800765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800765c:	ab01      	add	r3, sp, #4
 800765e:	466a      	mov	r2, sp
 8007660:	f7ff ffc8 	bl	80075f4 <__swhatbuf_r>
 8007664:	9f00      	ldr	r7, [sp, #0]
 8007666:	4605      	mov	r5, r0
 8007668:	4639      	mov	r1, r7
 800766a:	4630      	mov	r0, r6
 800766c:	f7ff fe8a 	bl	8007384 <_malloc_r>
 8007670:	b948      	cbnz	r0, 8007686 <__smakebuf_r+0x46>
 8007672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007676:	059a      	lsls	r2, r3, #22
 8007678:	d4ee      	bmi.n	8007658 <__smakebuf_r+0x18>
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	f043 0302 	orr.w	r3, r3, #2
 8007682:	81a3      	strh	r3, [r4, #12]
 8007684:	e7e2      	b.n	800764c <__smakebuf_r+0xc>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	6020      	str	r0, [r4, #0]
 800768a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	9b01      	ldr	r3, [sp, #4]
 8007692:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007696:	b15b      	cbz	r3, 80076b0 <__smakebuf_r+0x70>
 8007698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800769c:	4630      	mov	r0, r6
 800769e:	f000 f81d 	bl	80076dc <_isatty_r>
 80076a2:	b128      	cbz	r0, 80076b0 <__smakebuf_r+0x70>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	f023 0303 	bic.w	r3, r3, #3
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	431d      	orrs	r5, r3
 80076b4:	81a5      	strh	r5, [r4, #12]
 80076b6:	e7cf      	b.n	8007658 <__smakebuf_r+0x18>

080076b8 <_fstat_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d07      	ldr	r5, [pc, #28]	@ (80076d8 <_fstat_r+0x20>)
 80076bc:	2300      	movs	r3, #0
 80076be:	4604      	mov	r4, r0
 80076c0:	4608      	mov	r0, r1
 80076c2:	4611      	mov	r1, r2
 80076c4:	602b      	str	r3, [r5, #0]
 80076c6:	f7f9 fae0 	bl	8000c8a <_fstat>
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	d102      	bne.n	80076d4 <_fstat_r+0x1c>
 80076ce:	682b      	ldr	r3, [r5, #0]
 80076d0:	b103      	cbz	r3, 80076d4 <_fstat_r+0x1c>
 80076d2:	6023      	str	r3, [r4, #0]
 80076d4:	bd38      	pop	{r3, r4, r5, pc}
 80076d6:	bf00      	nop
 80076d8:	20001c64 	.word	0x20001c64

080076dc <_isatty_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d06      	ldr	r5, [pc, #24]	@ (80076f8 <_isatty_r+0x1c>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	602b      	str	r3, [r5, #0]
 80076e8:	f7f9 fadf 	bl	8000caa <_isatty>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_isatty_r+0x1a>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_isatty_r+0x1a>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20001c64 	.word	0x20001c64

080076fc <_sbrk_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d06      	ldr	r5, [pc, #24]	@ (8007718 <_sbrk_r+0x1c>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7f9 fae8 	bl	8000cdc <_sbrk>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_sbrk_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_sbrk_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	20001c64 	.word	0x20001c64

0800771c <_init>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr

08007728 <_fini>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr
